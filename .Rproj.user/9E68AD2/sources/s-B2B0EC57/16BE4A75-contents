
setwd("C:/Users/rblagus/Dropbox (MF Uni LJ)/Vienna2017/MixedSeparation/KosmidisIdea")
library(logistf)
library(lme4)
#library(MASS)
library(glmmTMB)
library(optimx)
source("algorithm1.r") #our functions
source("algorithm2.r") #our functions
source("source_script.R") #Ioannis functions
library(numDeriv)
library(blme)
library(xtable)
library(patchwork)
library(scales)
library(cowplot)
library(ggplot2)
library(memisc)
library(dplyr)
library(mvtnorm)
library(gridExtra)
#
#devtools::install_github("heogden/glmmsr",ref="penalty") 
library(glmmsr)


my.hit<-function(X,true){
  n<-nrow(X)
  hit<-rep(0,n)
  for (i in 1:n){
    if (is.na(X[i,1]<=true[i] & X[i,2]>=true[i])) hit[i]<-NA else {
      if (X[i,1]<=true[i] & X[i,2]>=true[i]) hit[i]<-1}
  }
  hit
}



#main function of Ioannis: data needs a special structure: data$X, data$Z and data$grouping with X and Z design matrices of fixed and random effectes, respectively
#res_mspal <- mv_get_MSPAL(start = st, data = data, nAGQ = nAGQ,
 #                         pen_log_sigma = function(x) sum(nHuber(x, 1)),
  #                        optimization_methods = optimization_methods,
   #                       method_name = "MSPL")

jj=1
n=5
N=20
p=2
beta=c(4,2)
b0=-1
x.type="bernouli1"
x.prob=0.3
var.random.inter=1
var.random.slope=2
cov.re=0.4

##not general! only works for rand int+rand slope!

my.sim<-function(jj,n,N,p,beta,b0,x.type="bernouli1",x.prob=0.3,var.random.inter=0.4,var.random.slope=0.2,cov.re=0.2,s=10,pen=1,m=1){
  
  dn<-paste("n",n,"N",N,"p",p,"beta",paste(beta,sep="."),"b0",b0,"x.type",x.type,"x.prob",x.prob,"var.re",var.random.inter,"var.sl",var.random.slope,sep="")
  sigma<-matrix(c(var.random.inter,cov.re,cov.re,var.random.slope),ncol=2)
  
  chsigma<-chol(sigma)
  
  true.kos<-c(log(diag(chsigma)[1]),chsigma[1,2],log(diag(chsigma)[2]))
  true.gmm<-c(sqrt(diag(sigma)),sigma[1,2]/prod(sqrt(diag(sigma))))
  true.h<-c(var.random.inter,NA,NA)
  
  true.kos<-c(b0,beta,true.kos)
  true.gmm<-c(b0,beta,true.gmm)
  true.h<-c(b0,beta,true.h)

  
  #for (jj in 1:M){
   
  flg<-TRUE
  while(flg==TRUE){
    #generate data
    
    x<-matrix(NA,ncol=p,nrow=1)
    y<-NA
    id<-NA
    pii<-list()
    for (i in 1:N){
      
      if (x.type=="norm") xi<-matrix(rnorm(n*p),ncol=p)
      if (x.type=="bernouli1") xi<-matrix(rbinom(n*p,prob=x.prob,size=1),ncol=p)
      if (x.type=="bernouli2") xi<-matrix(rep(rbinom(p,prob=x.prob,size=1),each=n),ncol=p)
      
      #random.intercept<- rnorm(1,mean=0,sd=sqrt(var.random.inter))
      #b1<-rnorm(1,mean=0,sd=sqrt(var.random.slope))
      
      re<-rmvnorm(1, mean = rep(0, nrow(sigma)), sigma = sigma)
      random.intercept<-re[1]
      bi<-re[2]
       
      
      betas<-c(random.intercept+b0,beta[1]+bi,beta[-1])
      xm<-cbind(1,xi)
       
      id.i<-rep(i,each=n)
      
      mui<- xm%*%matrix(betas,ncol=1) 
      pi<-1/(1+exp(-mui))
      pii[[i]]<-pi
      y.i<-rbinom(n,size=1,prob=pi)
      
      x<-rbind(x,xi)
      y<-c(y,y.i)
      id<-c(id,id.i)
      
    }
    xdf<-as.data.frame(x)
    nm<-names(xdf)
    if (sum(apply(as.matrix(xdf[-1,1:p],ncol=p,nrow=nrow(xdf)-1),2,sum)==0)==0) flg=FALSE else flg=TRUE
  }
  
  #start analysis
 true.pi<-unlist(pii)
 
  xdf$y<-y
  xdf$id<-id
  
  
  xdf<-xdf[-1,]
 
  data <- list(Y = xdf$y,
               X = model.matrix(
                 ~ V1+V2, data = xdf),
               Z = cbind(
                 rep(1, nrow(xdf)),
                 xdf$V1),
               M = rep(1, nrow(xdf)),
               grouping = xdf$id)
  p <- ncol(data$X)
  q <- max(1, ncol(data$Z))
  npar <- p + 0.5 * q * (q + 1)
  cond_inf_results <- try(mv_fit_all(start = rep(0, npar), data = data),
                          silent=TRUE)
  getCI<-function(x){
    cbind(x[,1]-1.96*x[,2],x[,1]+1.96*x[,2])
  }
  getsigma<-function(x,p){
    L<-rbind(c(exp(x[p+1,1]),0),
          c(x[p+2,1],exp(x[p+3,1])))
    L%*%t(L)
  }
  
  ##Ogden methods, can only handle models with a random intercept in case of penalty=TRUE, cannot handle real valued weights hence we canot use it in our algorithm!
     
  
 # fit1.mm.helen<-try(glmm(Y~-1+X+(1|grouping),family=binomial(link="logit"),
  #                        data=data,method="AGQ",penalty=TRUE),
   #                  silent=TRUE)
  #so slow....
#  if (class(fit1.mm.helen)=="try-error"){
#    ff.h<-rep(NA,p)
#    sigma.h<-rep(NA,length(c(sigma)))
    
#    ci.h.f<-matrix(NA,ncol=2,nrow=p)
#    ci.h.r<-matrix(NA,ncol=2,nrow=3)
#  } else {
#  ff.h<-coef(fit1.mm.helen)[-1]
#  sigma.h<-c(coef(fit1.mm.helen)[1]**2,rep(NA,length(c(sigma))-1))
  
#  ci.h<-confint(fit1.mm.helen)
  
#  ci.h.r<-ci.h[1,]**2
#  ci.h.r<-rbind(ci.h.r,matrix(NA,nrow=2,ncol=2))
#  ci.h.f<-ci.h[-1,]
#  }
  
  #add frth neglecting RE
  frth<-try(logistf(Y~-1+X,data=data,pl=FALSE),silent=TRUE)
  #add coefs and RE vcov est.
  
  if (class(frth)=="try-error"){
    ff.frth<-rep(NA,p)
    
    ci.frth.f<-matrix(NA,ncol=2,nrow=p)
    ci.frth.r<-matrix(NA,ncol=2,nrow=3)
    } else {
  ff.frth<-frth$coefficients
  
  ci.frth.f<-confint(frth)
  ci.frth.r<-matrix(NA,ncol=2,nrow=3)
  }
  
#  getCI.var<-function(x,p){
#    vrs<-x[(p+1):(nrow(x)-1),]**2
#    cv<-x[nrow(x),]*apply(sqrt(vrs),2,prod)
#    vrsl<-diag(vrs[,1],ncol=2,nrow=2)
#    vrsl[1,2]<-vrsl[2,1]<-cv[1]
#    vrsu<-diag(vrs[,2],ncol=2,nrow=2)
#    vrsu[1,2]<-vrsu[2,1]<-cv[2]
#    vrse<-diag(vrs[,3],ncol=2,nrow=2)
#    vrse[1,2]<-vrse[2,1]<-cv[3]
    
#    list(vrsl,vrsu,vrse)
#  }
  
  getCI.var<-function(x,p){
    vrs<-x[(p+1):(nrow(x)),] 
    
    
    list(vrs[,1],vrs[,2],vrs[,3])
  }
  
  #sum.ci<-function(l,u){
  #  cbind(c(diag(l),l[1,2]),c(diag(u),u[1,2]))
  #}
  
  sum.ci<-function(l,u){
    cbind(l,u)
  }
  
  
  #other rr
  rr.o<-try(georg.glmm.general.ridge(data,tol=1e-6,maxIter=25,useFirth=TRUE,s=s,prior.sigma=sigma),silent=TRUE)
  if (class(rr.o)=="try-error"){
    ff.rr.o<-rep(NA,p)
    sigma.rr.o<-rep(NA,length(c(sigma)))
    
    ci.rr.o.f<-matrix(NA,ncol=2,nrow=p)
    ci.rr.o.r<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.rr.o<-matrix(summary(rr.o)$varcor$cond$grouping[1:4],ncol=2)
    ff.rr.o<-fixef(rr.o)$cond
    
    ci.rr.o<-getCI.var(confint(rr.o),p=p)
    ci.rr.o.f<-confint(rr.o)[1:p,1:2]
    ci.rr.o.r.l<-ci.rr.o[[1]]
    ci.rr.o.r.u<-ci.rr.o[[2]]
    
    ci.rr.o.r<-sum.ci(ci.rr.o.r.l,ci.rr.o.r.u)
  }
  
  Fprior3<-try(log.F.prior.v2(data,m=m),silent=TRUE)
  if (class(Fprior3)=="try-error"){
    ff.Fprior3<-rep(NA,p)
    sigma.Fprior3<-rep(NA,length(c(sigma)))
    
    ci.Fprior.f3<-matrix(NA,ncol=2,nrow=p)
    ci.Fprior.r3<-matrix(NA,ncol=2,nrow=3)
  } else {
    sigma.Fprior3<-matrix(summary(Fprior3)$varcor$cond$grouping[1:4],ncol=2)
    ff.Fprior3<-fixef(Fprior3)$cond
    
    ci.Fprior3<-getCI.var(confint(Fprior3),p=p)
    ci.Fprior.f3<-confint(Fprior3)[1:p,1:2]
    ci.Fprior.r.l3<-ci.Fprior3[[1]]
    ci.Fprior.r.u3<-ci.Fprior3[[2]]
    
    ci.Fprior.r3<-sum.ci(ci.Fprior.r.l3,ci.Fprior.r.u3)
    
  }
  Fprior<-try(log.F.prior(data,m=m),silent=TRUE)
  if (class(Fprior)=="try-error"){
    ff.Fprior<-rep(NA,p)
    sigma.Fprior<-rep(NA,length(c(sigma)))
    
    ci.Fprior.f<-matrix(NA,ncol=2,nrow=p)
    ci.Fprior.r<-matrix(NA,ncol=2,nrow=3)
  } else {
    sigma.Fprior<-matrix(summary(Fprior)$varcor$cond$grouping[1:4],ncol=2)
    ff.Fprior<-fixef(Fprior)$cond
    
    ci.Fprior<-getCI.var(confint(Fprior),p=p)
    ci.Fprior.f<-confint(Fprior)[1:p,1:2]
    ci.Fprior.r.l<-ci.Fprior[[1]]
    ci.Fprior.r.u<-ci.Fprior[[2]]
    
    ci.Fprior.r<-sum.ci(ci.Fprior.r.l,ci.Fprior.r.u)
    
  }
  
  Fprior2<-try(log.F.prior(data,m=m,useFact = TRUE),silent=TRUE)
  if (class(Fprior2)=="try-error"){
    ff.Fprior2<-rep(NA,p)
    sigma.Fprior2<-rep(NA,length(c(sigma)))
    
    ci.Fprior.f2<-matrix(NA,ncol=2,nrow=p)
    ci.Fprior.r2<-matrix(NA,ncol=2,nrow=3)
  } else {
    sigma.Fprior2<-matrix(summary(Fprior2)$varcor$cond$grouping[1:4],ncol=2)
    ff.Fprior2<-fixef(Fprior2)$cond
    
    ci.Fprior2<-getCI.var(confint(Fprior2),p=p)
    ci.Fprior.f2<-confint(Fprior2)[1:p,1:2]
    ci.Fprior.r.l2<-ci.Fprior2[[1]]
    ci.Fprior.r.u2<-ci.Fprior2[[2]]
    
    ci.Fprior.r2<-sum.ci(ci.Fprior.r.l2,ci.Fprior.r.u2)
    
  }
  
  
  gmm.fit.tmb<- try(glmmTMB(Y~-1+X+(-1+Z|grouping),data=data,
                            family=binomial(link="logit")),silent=TRUE)
  georg.jef<-try(georg.glmm.general.v2(data=data,tol=1e-6,maxIter=25,
                                       useFirth=TRUE,use.pen.sigma=TRUE,
                                       pen.sigma.ridge=FALSE,s=NULL,pen=NULL),
                 silent=TRUE)
  georg.ns<-try(georg.glmm.general.v2(data=data,tol=1e-6,maxIter=25,
                                useFirth=TRUE,use.pen.sigma=FALSE,pen.sigma.ridge=NULL,
                                s=NULL,pen=NULL),
                silent=TRUE)
  georg.rr<-try(georg.glmm.general.v2(data=data,tol=1e-6,maxIter=25,
                                      useFirth=TRUE,use.pen.sigma=TRUE,
                                      pen.sigma.ridge=TRUE,s=s,pen=pen),
                silent=TRUE)
  
  georg.jef2<-try(georg.glmm.general.v3(data=data,tol=1e-6,maxIter=25,useFirth=TRUE),
                  silent=TRUE)
  georg.jef3<-try(georg.glmm.general.v3(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = TRUE),
                  silent=TRUE)
  georg.jef4<-try(georg.glmm.general.v4(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = FALSE),
                  silent=TRUE)
  
  georg.jef5<-try(georg.glmm.general.v5(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = FALSE),
                  silent=TRUE)
  georg.jef6<-try(georg.glmm.general.v5(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = TRUE),
                  silent=TRUE)
  georg.jef7<-try(georg.glmm.general.v6(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = TRUE),
                  silent=TRUE)
  
  georg.jef8<-try(georg.glmm.general.v5.1(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = FALSE),
                  silent=TRUE)
  georg.jef9<-try(georg.glmm.general.v7(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = TRUE,
                                        s=100,prior.sigma=sigma),
                  silent=TRUE)
  if (class(georg.jef9)=="try-error"){
    ff.georg.jef9<-rep(NA,p)
    sigma.georg.jef9<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f9<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r9<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef9<-matrix(summary(georg.jef9)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef9<-fixef(georg.jef9)$cond
    
    
    ci.georg.jef9<-getCI.var(confint(georg.jef9),p=p)
    ci.georg.jef.f9<-confint(georg.jef9)[1:p,1:2]
    ci.georg.jef.r.l9<-ci.georg.jef9[[1]]
    ci.georg.jef.r.u9<-ci.georg.jef9[[2]]
    
    ci.georg.jef.r9<-sum.ci(ci.georg.jef.r.l9,ci.georg.jef.r.u9)
    
    
  }
  
  
  
  if (class(georg.jef6)=="try-error"){
    ff.georg.jef6<-rep(NA,p)
    sigma.georg.jef6<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f6<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r6<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef6<-matrix(summary(georg.jef6)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef6<-fixef(georg.jef6)$cond
    
    
    ci.georg.jef6<-getCI.var(confint(georg.jef6),p=p)
    ci.georg.jef.f6<-confint(georg.jef6)[1:p,1:2]
    ci.georg.jef.r.l6<-ci.georg.jef6[[1]]
    ci.georg.jef.r.u6<-ci.georg.jef6[[2]]
    
    ci.georg.jef.r6<-sum.ci(ci.georg.jef.r.l6,ci.georg.jef.r.u6)
    
    
  }
  
  if (class(georg.jef7)=="try-error"){
    ff.georg.jef7<-rep(NA,p)
    sigma.georg.jef7<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f7<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r7<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef7<-matrix(summary(georg.jef7)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef7<-fixef(georg.jef7)$cond
    
    
    ci.georg.jef7<-getCI.var(confint(georg.jef7),p=p)
    ci.georg.jef.f7<-confint(georg.jef7)[1:p,1:2]
    ci.georg.jef.r.l7<-ci.georg.jef7[[1]]
    ci.georg.jef.r.u7<-ci.georg.jef7[[2]]
    
    ci.georg.jef.r7<-sum.ci(ci.georg.jef.r.l7,ci.georg.jef.r.u7)
    
    
  }
  
  if (class(georg.jef)=="try-error"){
    ff.georg.jef<-rep(NA,p)
    sigma.georg.jef<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
  sigma.georg.jef<-matrix(summary(georg.jef)$varcor$cond$grouping[1:4],ncol=2)
  ff.georg.jef<-fixef(georg.jef)$cond
  
  
  ci.georg.jef<-getCI.var(confint(georg.jef),p=p)
  ci.georg.jef.f<-confint(georg.jef)[1:p,1:2]
  ci.georg.jef.r.l<-ci.georg.jef[[1]]
  ci.georg.jef.r.u<-ci.georg.jef[[2]]
  
  ci.georg.jef.r<-sum.ci(ci.georg.jef.r.l,ci.georg.jef.r.u)
  
  
  }
  
  if (class(georg.jef8)=="try-error"){
    ff.georg.jef8<-rep(NA,p)
    sigma.georg.jef8<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f8<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r8<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef8<-matrix(summary(georg.jef8)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef8<-fixef(georg.jef8)$cond
    
    
    ci.georg.jef8<-getCI.var(confint(georg.jef8),p=p)
    ci.georg.jef.f8<-confint(georg.jef8)[1:p,1:2]
    ci.georg.jef.r.l8<-ci.georg.jef8[[1]]
    ci.georg.jef.r.u8<-ci.georg.jef8[[2]]
    
    ci.georg.jef.r8<-sum.ci(ci.georg.jef.r.l8,ci.georg.jef.r.u8)
    
    
  }
  
  
  
  
  if (class(georg.jef5)=="try-error"){
    ff.georg.jef5<-rep(NA,p)
    sigma.georg.jef5<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f5<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r5<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef5<-matrix(summary(georg.jef5)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef5<-fixef(georg.jef5)$cond
    
    
    ci.georg.jef5<-getCI.var(confint(georg.jef5),p=p)
    ci.georg.jef.f5<-confint(georg.jef5)[1:p,1:2]
    ci.georg.jef.r.l5<-ci.georg.jef5[[1]]
    ci.georg.jef.r.u5<-ci.georg.jef5[[2]]
    
    ci.georg.jef.r5<-sum.ci(ci.georg.jef.r.l5,ci.georg.jef.r.u5)
    
    
  }
  
  if (class(georg.jef4)=="try-error"){
    ff.georg.jef4<-rep(NA,p)
    sigma.georg.jef4<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f4<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.f4<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef4<-matrix(summary(georg.jef4)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef4<-fixef(georg.jef4)$cond
    
    
    ci.georg.jef4<-getCI.var(confint(georg.jef4),p=p)
    ci.georg.jef.f4<-confint(georg.jef4)[1:p,1:2]
    ci.georg.jef.r.l4<-ci.georg.jef4[[1]]
    ci.georg.jef.r.u4<-ci.georg.jef4[[2]]
    
    ci.georg.jef.r4<-sum.ci(ci.georg.jef.r.l4,ci.georg.jef.r.u4)
    
    
  }
  
  
  if (class(georg.ns)=="try-error"){
    ff.georg.ns<-rep(NA,p)
    sigma.georg.ns<-rep(NA,length(c(sigma)))
    
    ci.georg.ns.f<-matrix(NA,ncol=2,nrow=p)
    ci.georg.ns.r<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
  sigma.georg.ns<-matrix(summary(georg.ns)$varcor$cond$grouping[1:4],ncol=2)
  ff.georg.ns<-fixef(georg.ns)$cond
  
  ci.georg.ns<-getCI.var(confint(georg.ns),p=p)
  ci.georg.ns.f<-confint(georg.ns)[1:p,1:2]
  ci.georg.ns.r.l<-ci.georg.ns[[1]]
  ci.georg.ns.r.u<-ci.georg.ns[[2]]
  
  ci.georg.ns.r<-sum.ci(ci.georg.ns.r.l,ci.georg.ns.r.u)
  
  
  
  }
  
  if (class(georg.rr)=="try-error"){
    ff.georg.rr<-rep(NA,p)
    sigma.georg.rr<-rep(NA,length(c(sigma)))
    
    ci.georg.rr.f<-matrix(NA,ncol=2,nrow=p)
    ci.georg.rr.r<-matrix(NA,ncol=2,nrow=3)
  } else {
  sigma.georg.rr<-matrix(summary(georg.rr)$varcor$cond$grouping[1:4],ncol=2)
  ff.georg.rr<-fixef(georg.rr)$cond
  
  ci.georg.rr<-getCI.var(confint(georg.rr),p=p)
  ci.georg.rr.f<-confint(georg.rr)[1:p,1:2]
  ci.georg.rr.r.l<-ci.georg.rr[[1]]
  ci.georg.rr.r.u<-ci.georg.rr[[2]]
  
  ci.georg.rr.r<-sum.ci(ci.georg.rr.r.l,ci.georg.rr.r.u)
  
  
  
  }
  
  if (class(georg.jef2)=="try-error"){
    ff.georg.jef2<-rep(NA,p)
    sigma.georg.jef2<-rep(NA,length(c(sigma)))
    
    ci.georg.jef2.f<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef2.r<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
  sigma.georg.jef2<-matrix(summary(georg.jef2)$varcor$cond$grouping[1:4],ncol=2)
  ff.georg.jef2<-fixef(georg.jef2)$cond
  
  ci.georg.jef2<-getCI.var(confint(georg.jef2),p=p)
  ci.georg.jef2.f<-confint(georg.jef2)[1:p,1:2]
  ci.georg.jef2.r.l<-ci.georg.jef2[[1]]
  ci.georg.jef2.r.u<-ci.georg.jef2[[2]]
  
  ci.georg.jef2.r<-sum.ci(ci.georg.jef2.r.l,ci.georg.jef2.r.u)
  
  
  }
  
  
  if (class(georg.jef3)=="try-error"){
    ff.georg.jef3<-rep(NA,p)
    sigma.georg.jef3<-rep(NA,length(c(sigma)))
    
    ci.georg.jef3.f<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef3.r<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef3<-matrix(summary(georg.jef3)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef3<-fixef(georg.jef3)$cond
    
    ci.georg.jef3<-getCI.var(confint(georg.jef3),p=p)
    ci.georg.jef3.f<-confint(georg.jef3)[1:p,1:2]
    ci.georg.jef3.r.l<-ci.georg.jef3[[1]]
    ci.georg.jef3.r.u<-ci.georg.jef3[[2]]
    
    ci.georg.jef3.r<-sum.ci(ci.georg.jef3.r.l,ci.georg.jef3.r.u)
    
    
  }
  
  if (class(gmm.fit.tmb)=="try-error"){
    ff.ml<-rep(NA,p)
    sigma.ml<-rep(NA,length(c(sigma)))
    
    ci.ml.f<-matrix(NA,ncol=2,nrow=p)
    ci.ml.r<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
  sigma.ml<-matrix(summary(gmm.fit.tmb)$varcor$cond$grouping[1:4],ncol=2)
  ff.ml<-fixef(gmm.fit.tmb)$cond
  
  
  ci.ml<-getCI.var(confint(gmm.fit.tmb),p=p)
  ci.ml.f<-confint(gmm.fit.tmb)[1:p,1:2]
  ci.ml.r.l<-ci.ml[[1]]
  ci.ml.r.u<-ci.ml[[2]]
  
  ci.ml.r<-sum.ci(ci.ml.r.l,ci.ml.r.u)
  
  
  }
  
  getsigma2<-function(x,p){
    x[(p+1):nrow(x),]
  }
  if (class(cond_inf_results)=="try-error"){ 
    sigma.mspl<-sigma.t<-sigma.n<-rep(NA,length(c(sigma)))
    ff.mspl<-ff.t<-ff.n<-rep(NA,p)
    
    ci.mspl.f<-ci.t.f<-ci.n.f<-matrix(NA,ncol=2,nrow=p)
    ci.mspl.r<-ci.t.r<-ci.n.r<-matrix(NA,ncol=2,nrow=3)
    
    } else {
  sigma.mspl<-getsigma(cond_inf_results$MSPL,p=p)
  ff.mspl<-cond_inf_results$MSPL[1:p,1]
  ci.mspl<-getCI(cond_inf_results$MSPL)
  ci.mspl.f<-ci.mspl[1:p,]
  ci.mspl.r.l<-getsigma2(matrix(ci.mspl[,1],ncol=1),p=p)
  ci.mspl.r.u<-getsigma2(matrix(ci.mspl[,2],ncol=1),p=p)
  
  ci.mspl.r<-sum.ci(ci.mspl.r.l,ci.mspl.r.u)
  
  sigma.t<-getsigma(cond_inf_results$bglmer_t,p=p)
  ff.t<-cond_inf_results$bglmer_t[1:p,1]
  ci.t<-getCI(cond_inf_results$bglmer_t)
  ci.t.f<-ci.t[1:p,]
  ci.t.r.l<-getsigma2(matrix(ci.t[,1],ncol=1),p=p)
  ci.t.r.u<-getsigma2(matrix(ci.t[,2],ncol=1),p=p)
  
  ci.t.r<-sum.ci(ci.t.r.l,ci.t.r.u)
  
  sigma.n<-getsigma(cond_inf_results$bglmer_n,p=p)
  ff.n<-cond_inf_results$bglmer_n[1:p,1]
  
  ci.n<-getCI(cond_inf_results$bglmer_n)
  ci.n.f<-ci.n[1:p,]
  ci.n.r.l<-getsigma2(matrix(ci.n[,1],ncol=1),p=p)
  ci.n.r.u<-getsigma2(matrix(ci.n[,2],ncol=1),p=p)
  
  ci.n.r<-sum.ci(ci.n.r.l,ci.n.r.u)
  
  
  }
  mc<-function(x){
    c(diag(x),x[1,2])
  }
   
  res.Fprior<-c( ff.Fprior ,mc(sigma.Fprior))
  ci.Fprior.f1<-cbind(t(ci.Fprior.f),t(ci.Fprior.r))
  
  res.Fprior3<-c( ff.Fprior3 ,mc(sigma.Fprior3))
  ci.Fprior.f13<-cbind(t(ci.Fprior.f3),t(ci.Fprior.r3))
  
  
  
  res.Fprior2<-c( ff.Fprior2 ,mc(sigma.Fprior2))
  ci.Fprior.f12<-cbind(t(ci.Fprior.f2),t(ci.Fprior.r2))
  
  
  res.rr.o<-c( ff.rr.o ,mc(sigma.rr.o))
  ci.rr.o.f1<-cbind(t(ci.rr.o.f),t(ci.rr.o.r))
  
  res.georg.jef9<-c( ff.georg.jef9,mc(sigma.georg.jef9))
  
  res.georg.jef8<-c( ff.georg.jef8,mc(sigma.georg.jef8))
  
  res.georg.jef6<-c( ff.georg.jef6 ,mc(sigma.georg.jef6))
  res.georg.jef7<-c( ff.georg.jef7 ,mc(sigma.georg.jef7))
  res.georg.jef5<-c( ff.georg.jef5 ,mc(sigma.georg.jef5))
  
  res.georg.jef4<-c( ff.georg.jef4 ,mc(sigma.georg.jef4))
  res.georg.jef<-c( ff.georg.jef ,mc(sigma.georg.jef))
  res.georg.ns<-c( ff.georg.ns ,mc(sigma.georg.ns))
  res.georg.rr<-c( ff.georg.jef ,mc(sigma.georg.rr))
  res.georg.jef2<-c( ff.georg.jef2 ,mc(sigma.georg.jef2))
  res.georg.jef3<-c( ff.georg.jef3 ,mc(sigma.georg.jef3))
  
  res.frth<-c(ff.frth,rep(NA,length(c(sigma))-1))
  res.ml<-c( ff.ml ,mc(sigma.ml))
  res.mspl<-c( ff.mspl ,mc(sigma.mspl))
  res.t<-c( ff.t ,mc(sigma.t))
  res.n<-c( ff.n ,mc(sigma.n))
  
  #res.h<-c(ff.h,sigma.h[-length(sigma.h)])
  ci.h.f1<-cbind(t(ci.h.f),t(ci.h.r))
  
  ci.georg.jef.f19<-cbind(t(ci.georg.jef.f9),t(ci.georg.jef.r9))
  
  ci.georg.jef.f18<-cbind(t(ci.georg.jef.f8),t(ci.georg.jef.r8))
  
  
  
  ci.georg.jef.f15<-cbind(t(ci.georg.jef.f5),t(ci.georg.jef.r5))
  
  ci.georg.jef.f16<-cbind(t(ci.georg.jef.f6),t(ci.georg.jef.r6))
  ci.georg.jef.f17<-cbind(t(ci.georg.jef.f7),t(ci.georg.jef.r7))
  
  ci.georg.jef.f14<-cbind(t(ci.georg.jef.f4),t(ci.georg.jef.r4))
  ci.georg.jef.f1<-cbind(t(ci.georg.jef.f),t(ci.georg.jef.r))
  ci.georg.jef2.f1<-cbind(t(ci.georg.jef2.f),t(ci.georg.jef2.r))
  ci.georg.jef3.f1<-cbind(t(ci.georg.jef3.f),t(ci.georg.jef3.r))
  
  ci.georg.ns.f1<-cbind(t(ci.georg.ns.f),t(ci.georg.ns.r))
  ci.georg.rr.f1<-cbind(t(ci.georg.rr.f),t(ci.georg.rr.r))
  
  ci.frth.f1<-cbind(t(ci.frth.f),t(ci.frth.r))
  
  ci.ml.f1<-cbind(t(ci.ml.f),t(ci.ml.r))
  
  ci.mspl.f1<-cbind(t(ci.mspl.f),t(ci.mspl.r))
  ci.t.f1<-cbind(t(ci.t.f),t(ci.t.r))
  ci.n.f1<-cbind(t(ci.n.f),t(ci.n.r))
  
  ###!CIs for REs for Helen are for var(b0)
  ###!CIs for REs for Kosmidis methods (mspl, t, n) are for log(diag(L)) and L[1,2] where L is lower chol of Sigma
  ###!CIs for RES for all methods based on glmmTMB are for sqrt(diag(Sigma)) and Cor[1,2] where Cor is correlation matrix of Sigma
  
  
  
  
  
  
  list(
    Fprior3=c(res.Fprior3,c(t(ci.Fprior.f13)),true.gmm), #logF11 prior, v3, only one pseudo per parameter with new id
    Fprior=c(res.Fprior,c(t(ci.Fprior.f1)),true.gmm), #logF11 prior
    Fprior2=c(res.Fprior2,c(t(ci.Fprior.f12)),true.gmm), #logF11 prior, v2 scaling also with ni
    ridge=c(res.rr.o,c(t(ci.rr.o.f1)),true.gmm), #true multivariate ridge prior
    frth=c(res.frth,c(t(ci.frth.f1)),true.gmm), #only fixef analysis
       ml=c(res.ml,c(t(ci.ml.f1)),true.gmm), #maximum likelihood
       georg.jef2=c(res.georg.jef2,c(t(ci.georg.jef2.f1)),true.gmm), #Rok's method
    georg.jef3=c(res.georg.jef3,c(t(ci.georg.jef3.f1)),true.gmm), #Rok's method,v2: weights are multiplied by ni->less weight for pseudo->less penalty
       georg.jef=c(res.georg.jef,c(t(ci.georg.jef.f1)),true.gmm), #Georg's method
       georg.ns=c(res.georg.ns,c(t(ci.georg.ns.f1)),true.gmm), #Jefrey for X but no penalty for Z
       georg.rr=c(res.georg.rr,c(t(ci.georg.rr.f1)),true.gmm), #independent (max!) ridge prior
       
    
    georg.jef4=c(res.georg.jef4,c(t(ci.georg.jef.f14)),true.gmm), #rok's method other hat matrix, not fitting Firth
    
    georg.jef5=c(res.georg.jef5,c(t(ci.georg.jef.f15)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data
   
    georg.jef6=c(res.georg.jef6,c(t(ci.georg.jef.f16)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, wieght his by ni
    georg.jef7=c(res.georg.jef7,c(t(ci.georg.jef.f17)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, weight his by ni only for X
    
    
    georg.jef8=c(res.georg.jef8,c(t(ci.georg.jef.f18)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, block diagonal hat matrices (as in gee paper); this should not work, unless we put more penalty on the diagonals! 
    
    georg.jef9=c(res.georg.jef9,c(t(ci.georg.jef.f19)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, ridge for REs, with only one pseudo with new ID
    
    
       mspl=c(res.mspl,c(t(ci.mspl.f1)),true.kos), #Kosmidis
    t=c(res.t,c(t(ci.t.f1)),true.kos), #Bayes, t prior
    n=c(res.n,c(t(ci.n.f1)),true.kos)#, #Bayes, N prior
  #  helen=c(res.h,c(t(ci.h.f1)),true.h)
  ) #Ogden method
  } 

jj
n=10
N=50
p=2
beta=c(4,2)
b0=-1
x.type="norm"
x.prob=0.3
var.random.inter=1#e-5
var.random.slope=5#e-5
cov.re=0.2#e-6
s=10
pen=1
m=1


my.sim.frth<-function(jj,n,N,p,beta,b0,x.type="bernouli1",x.prob=0.3,var.random.inter=0.4,var.random.slope=0.2,cov.re=0.2,s=10,pen=1,m=1){
  
  dn<-paste("n",n,"N",N,"p",p,"beta",paste(beta,sep="."),"b0",b0,"x.type",x.type,"x.prob",x.prob,"var.re",var.random.inter,"var.sl",var.random.slope,sep="")
  sigma<-matrix(c(var.random.inter,cov.re,cov.re,var.random.slope),ncol=2)
  
  chsigma<-chol(sigma)
  
  true.kos<-c(log(diag(chsigma)[1]),chsigma[1,2],log(diag(chsigma)[2]))
  true.gmm<-c(sqrt(diag(sigma)),sigma[1,2]/prod(sqrt(diag(sigma))))
  true.h<-c(var.random.inter,NA,NA)
  
  true.kos<-c(b0,beta,true.kos)
  true.gmm<-c(b0,beta,true.gmm)
  true.h<-c(b0,beta,true.h)
  
  
  #for (jj in 1:M){
  
  flg<-TRUE
  while(flg==TRUE){
    #generate data
    
    x<-matrix(NA,ncol=p,nrow=1)
    y<-NA
    id<-NA
    pii<-muii<-list()
    for (i in 1:N){
      
      if (x.type=="norm") xi<-matrix(rnorm(n*p),ncol=p)
      if (x.type=="bernouli1") xi<-matrix(rbinom(n*p,prob=x.prob,size=1),ncol=p)
      if (x.type=="bernouli2") xi<-matrix(rep(rbinom(p,prob=x.prob,size=1),each=n),ncol=p)
      
      #random.intercept<- rnorm(1,mean=0,sd=sqrt(var.random.inter))
      #b1<-rnorm(1,mean=0,sd=sqrt(var.random.slope))
      
      re<-rmvnorm(1, mean = rep(0, nrow(sigma)), sigma = sigma)
      random.intercept<-re[1]
      bi<-re[2]
      
      
      betas<-c(random.intercept+b0,beta[1]+bi,beta[-1])
      xm<-cbind(1,xi)
      
      id.i<-rep(i,each=n)
      
      mui<- xm%*%matrix(betas,ncol=1) 
      pi<-1/(1+exp(-mui))
      pii[[i]]<-pi
      muii[[i]]<-mui
      y.i<-rbinom(n,size=1,prob=pi)
      
      x<-rbind(x,xi)
      y<-c(y,y.i)
      id<-c(id,id.i)
      
    }
    xdf<-as.data.frame(x)
    nm<-names(xdf)
    if (sum(apply(as.matrix(xdf[-1,1:p],ncol=p,nrow=nrow(xdf)-1),2,sum)==0)==0) flg=FALSE else flg=TRUE
  }
  
  #start analysis
  true.pi<-unlist(pii)
  
  xdf$y<-y
  xdf$id<-id
  
  
  xdf<-xdf[-1,]
  
  data <- list(Y = xdf$y,
               X = model.matrix(
                 ~ V1+V2, data = xdf),
               Z = cbind(
                 rep(1, nrow(xdf)),
                 xdf$V1),
               M = rep(1, nrow(xdf)),
               grouping = xdf$id)
   
  
  
  my_rand<-function(x){
    zz=0
    idi<-rep(NA,length(unique(x$grouping)))
    for (i in unique(x$grouping)){
      zz=zz+1
      idi[zz]<-sample(which(x$grouping==i),1)
      
    }
    
    data<-list(Y=x$Y[idi],X=x$X[idi,],Z=x$Z[idi,],M=x$M[idi],grouping=x$grouping[idi])
    data
  }
  datar<-my_rand(data) 
  ml<-try(logistf(Y~-1+X,data=data,pl=FALSE,firth = FALSE),silent=TRUE)
  
  frth<-try(logistf(Y~-1+X,data=data,pl=FALSE),silent=TRUE)
  frthr<-try(logistf(Y~-1+X,data=datar,pl=FALSE),silent=TRUE)
  getI<-function(X,pred){
    M<-diag(pred)
    t(X)%*%M%*%X
  }
  getI2<-function(X,pred,group){
    zz=0
    for (i in unique(group)){
    zz=zz+1
    Mi<-diag(pred[group==i])
      Xi<-X[group==i,]
      wi<-t(Xi)%*%Mi%*%Xi
      if (zz==1) W<-wi else W<-W+wi
    }
    W
  }
  estpi<-expit(frth$linear.predictors)
#plot(true.pi,estpi)

my_frth<-function(Y,X,pi){
  W<-diag(pi)
  H<-(W%^%(1/2))%*%X%*%solve(t(X)%*%W%*%X)%*%t(X)%*%(W%^%(1/2))
  hi<-diag(H)
  Xa<-rbind(X,X,X)
  Ya<-c(Y,Y,1-Y)
  wi<-c(rep(1,length(Y)),hi/2,hi/2)
  dda<-list(Xa=Xa,Ya=Ya,wi=wi)
  #logistf(Ya~-1+Xa,weights=wi,pl=FALSE,firth = FALSE,data=dda)
  
  glm(Ya~-1+Xa,weights=wi,family=binomial(link="logit"),data=dda)
}

#mm<-my_frth(data$Y,data$X,true.pi)
  cfs<-matrix(NA,ncol=3,nrow=length(unique(data$grouping)))
 # zz=0
  #for (i in unique(data$grouping)){
   # zz=zz+1
  #  xi<-data$X[data$grouping==i,]
  #  yi<-data$Y[data$grouping==i]
  #  cfs[zz,]<-logistf(yi~xi-1)$coef
#  }
  rr<-apply(cfs,2,mean)
  #getI(data$X,predict(frth))
  
  #getI(datar$X,predict(frthr))
  #getI2(data$X,predict(frth),data$grouping) #the same as getI as expected, so indeed we are using the same fixef penalty
  
  list(frth=frth$coefficients,frthr=frthr$coefficients,rr=rr,mm=ml$coef)
  
}
 


M=500
p=2
betas=c(4,2)
b0=-1
var.random.inter=1e-2
var.random.slope=5e-2
cov.re=0.5e-6 
tr<-c(b0,betas,var.random.inter,cov.re,cov.re,var.random.slope)
pn<-max(c(var.random.inter,var.random.slope,cov.re))
 
#for (n in c(5,10,20,50)){
#  for (N in c(10,20,50)){
     
     n=5
     N=50
 
    mm<-rr<-fr<-frr<-
       matrix(NA,nrow=M,ncol= p+1 )
    
    
    for (ii in 1:M){
      
      resi<-try(my.sim.frth(jj=1,n=n,N=N,p=p,beta=betas,b0=b0,x.type="bernouli1",x.prob=0.3,var.random.inter=var.random.inter,var.random.slope=var.random.slope,cov.re=cov.re,s=10, pen=pn,m=1),silent=TRUE)
      
      #resi<-try(my.sim(jj=1,n=n,N=N,p=p,beta=betas,b0=b0,x.type="bernouli2",x.prob=0.3,var.random.inter=var.random.inter,var.random.slope=var.random.slope,cov.re=cov.re,s=10, pen=pn,m=1),silent=TRUE)
      if (class(resi)!="try-error"){
 fr[ii,]<-resi$frth
 frr[ii,]<-resi$frthr
 rr[ii,]<-resi$rr
 mm[ii,]<-resi$mm
      } 
      #print(ii)
    }
  apply(fr,2,mean,na.rm=T)
  apply(frr,2,mean,na.rm=T)
  apply(rr,2,mean,na.rm=T)
  apply(mm,2,mean,na.rm=T)
boxplot(frr )    

my.sim.fast<-function(jj,n,N,p,beta,b0,x.type="bernouli1",x.prob=0.3,var.random.inter=0.4,var.random.slope=0.2,cov.re=0.2,s=10,pen=1,m=1){
  
  dn<-paste("n",n,"N",N,"p",p,"beta",paste(beta,sep="."),"b0",b0,"x.type",x.type,"x.prob",x.prob,"var.re",var.random.inter,"var.sl",var.random.slope,sep="")
  sigma<-matrix(c(var.random.inter,cov.re,cov.re,var.random.slope),ncol=2)
  
  chsigma<-chol(sigma)
  
  true.kos<-c(log(diag(chsigma)[1]),chsigma[1,2],log(diag(chsigma)[2]))
  true.gmm<-c(sqrt(diag(sigma)),sigma[1,2]/prod(sqrt(diag(sigma))))
  true.h<-c(var.random.inter,NA,NA)
  
  true.kos<-c(b0,beta,true.kos)
  true.gmm<-c(b0,beta,true.gmm)
  true.h<-c(b0,beta,true.h)
  
  
  #for (jj in 1:M){
  
  flg<-TRUE
  while(flg==TRUE){
    #generate data
    
    x<-matrix(NA,ncol=p,nrow=1)
    y<-NA
    id<-NA
    pii<-list()
    for (i in 1:N){
      
      if (x.type=="norm") xi<-matrix(rnorm(n*p),ncol=p)
      if (x.type=="bernouli1") xi<-matrix(rbinom(n*p,prob=x.prob,size=1),ncol=p)
      if (x.type=="bernouli2") xi<-matrix(rep(rbinom(p,prob=x.prob,size=1),each=n),ncol=p)
      
      #random.intercept<- rnorm(1,mean=0,sd=sqrt(var.random.inter))
      #b1<-rnorm(1,mean=0,sd=sqrt(var.random.slope))
      
      re<-rmvnorm(1, mean = rep(0, nrow(sigma)), sigma = sigma)
      random.intercept<-re[1]
      bi<-re[2]
      
      
      betas<-c(random.intercept+b0,beta[1]+bi,beta[-1])
      xm<-cbind(1,xi)
      
      id.i<-rep(i,each=n)
      
      mui<- xm%*%matrix(betas,ncol=1) 
      pi<-1/(1+exp(-mui))
      pii[[i]]<-pi
      y.i<-rbinom(n,size=1,prob=pi)
      
      x<-rbind(x,xi)
      y<-c(y,y.i)
      id<-c(id,id.i)
      
    }
    xdf<-as.data.frame(x)
    nm<-names(xdf)
    if (sum(apply(as.matrix(xdf[-1,1:p],ncol=p,nrow=nrow(xdf)-1),2,sum)==0)==0) flg=FALSE else flg=TRUE
  }
  
  #start analysis
  true.pi<-unlist(pii)
  
  xdf$y<-y
  xdf$id<-id
  
  
  xdf<-xdf[-1,]
  
  data <- list(Y = xdf$y,
               X = model.matrix(
                 ~ V1+V2, data = xdf),
               Z = cbind(
                 rep(1, nrow(xdf)),
                 xdf$V1),
               M = rep(1, nrow(xdf)),
               grouping = xdf$id)
  p <- ncol(data$X)
  q <- max(1, ncol(data$Z))
  npar <- p + 0.5 * q * (q + 1)
  cond_inf_results <- try(mv_fit_all(start = rep(0, npar), data = data),
                          silent=TRUE)
  getCI<-function(x){
    cbind(x[,1]-1.96*x[,2],x[,1]+1.96*x[,2])
  }
  getsigma<-function(x,p){
    L<-rbind(c(exp(x[p+1,1]),0),
             c(x[p+2,1],exp(x[p+3,1])))
    L%*%t(L)
  }
  
  
  
  getCI.var<-function(x,p){
    vrs<-x[(p+1):(nrow(x)),] 
    
    
    list(vrs[,1],vrs[,2],vrs[,3])
  }
  
  #sum.ci<-function(l,u){
  #  cbind(c(diag(l),l[1,2]),c(diag(u),u[1,2]))
  #}
  
  sum.ci<-function(l,u){
    cbind(l,u)
  }
  my_rand<-function(x){
    zz=0
    idi<-rep(NA,length(unique(x$grouping)))
    for (i in unique(x$grouping)){
      zz=zz+1
      idi[zz]<-sample(which(x$grouping==i),1)
      
    }
    
    data<-list(Y=x$Y[idi],X=x$X[idi,],Z=x$Z[idi,],M=x$M[idi],grouping=x$grouping[idi])
    data
  }
  datar<-my_rand(data) 
  cfs<-matrix(NA,ncol=3,nrow=length(unique(data$grouping)))
  zz=0
  for (i in unique(data$grouping)){
    zz=zz+1
    xi<-data$X[data$grouping==i,]
     yi<-data$Y[data$grouping==i]
     cfs[zz,]<-logistf(yi~xi-1)$coef
  }
  apply(cfs,2,mean)
  frth<-try(logistf(Y~-1+X,data=data,pl=FALSE),silent=TRUE)
  frthr<-try(logistf(Y~-1+X,data=datar,pl=FALSE),silent=TRUE)
  sigma2<-matrix(c(1000,0,0,1000),ncol=2)
     georg.jef9<-try(georg.glmm.general.v7(data=data,tol=1e-6,maxIter=25,useFirth=TRUE,useFact = TRUE,
                                        s=100,prior.sigma=sigma2,useRE=FALSE,useFact2 = FALSE),
                  silent=TRUE)
  if (class(georg.jef9)=="try-error"){
    ff.georg.jef9<-rep(NA,p)
    sigma.georg.jef9<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f9<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r9<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef9<-matrix(summary(georg.jef9)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef9<-fixef(georg.jef9)$cond
    
    
    ci.georg.jef9<-getCI.var(confint(georg.jef9),p=p)
    ci.georg.jef.f9<-confint(georg.jef9)[1:p,1:2]
    ci.georg.jef.r.l9<-ci.georg.jef9[[1]]
    ci.georg.jef.r.u9<-ci.georg.jef9[[2]]
    
    ci.georg.jef.r9<-sum.ci(ci.georg.jef.r.l9,ci.georg.jef.r.u9)
    
    
  }
  
  
   
   
  getsigma2<-function(x,p){
    x[(p+1):nrow(x),]
  }
  if (class(cond_inf_results)=="try-error"){ 
    sigma.mspl<-sigma.t<-sigma.n<-rep(NA,length(c(sigma)))
    ff.mspl<-ff.t<-ff.n<-rep(NA,p)
    
    ci.mspl.f<-ci.t.f<-ci.n.f<-matrix(NA,ncol=2,nrow=p)
    ci.mspl.r<-ci.t.r<-ci.n.r<-matrix(NA,ncol=2,nrow=3)
    
  } else {
    sigma.mspl<-getsigma(cond_inf_results$MSPL,p=p)
    ff.mspl<-cond_inf_results$MSPL[1:p,1]
    ci.mspl<-getCI(cond_inf_results$MSPL)
    ci.mspl.f<-ci.mspl[1:p,]
    ci.mspl.r.l<-getsigma2(matrix(ci.mspl[,1],ncol=1),p=p)
    ci.mspl.r.u<-getsigma2(matrix(ci.mspl[,2],ncol=1),p=p)
    
    ci.mspl.r<-sum.ci(ci.mspl.r.l,ci.mspl.r.u)
    
    sigma.t<-getsigma(cond_inf_results$bglmer_t,p=p)
    ff.t<-cond_inf_results$bglmer_t[1:p,1]
    ci.t<-getCI(cond_inf_results$bglmer_t)
    ci.t.f<-ci.t[1:p,]
    ci.t.r.l<-getsigma2(matrix(ci.t[,1],ncol=1),p=p)
    ci.t.r.u<-getsigma2(matrix(ci.t[,2],ncol=1),p=p)
    
    ci.t.r<-sum.ci(ci.t.r.l,ci.t.r.u)
    
    sigma.n<-getsigma(cond_inf_results$bglmer_n,p=p)
    ff.n<-cond_inf_results$bglmer_n[1:p,1]
    
    ci.n<-getCI(cond_inf_results$bglmer_n)
    ci.n.f<-ci.n[1:p,]
    ci.n.r.l<-getsigma2(matrix(ci.n[,1],ncol=1),p=p)
    ci.n.r.u<-getsigma2(matrix(ci.n[,2],ncol=1),p=p)
    
    ci.n.r<-sum.ci(ci.n.r.l,ci.n.r.u)
    
    
  }
  mc<-function(x){
    c(diag(x),x[1,2])
  }
  
    
  
   
  res.georg.jef9<-c( ff.georg.jef9,mc(sigma.georg.jef9))
  
   
  ci.georg.jef.f19<-cbind(t(ci.georg.jef.f9),t(ci.georg.jef.r9))
  res.mspl<-c( ff.mspl ,mc(sigma.mspl))
  res.t<-c( ff.t ,mc(sigma.t))
  res.n<-c( ff.n ,mc(sigma.n))
  
    
  ###!CIs for REs for Helen are for var(b0)
  ###!CIs for REs for Kosmidis methods (mspl, t, n) are for log(diag(L)) and L[1,2] where L is lower chol of Sigma
  ###!CIs for RES for all methods based on glmmTMB are for sqrt(diag(Sigma)) and Cor[1,2] where Cor is correlation matrix of Sigma
  
  
  ci.mspl.f1<-cbind(t(ci.mspl.f),t(ci.mspl.r))
  ci.t.f1<-cbind(t(ci.t.f),t(ci.t.r))
  ci.n.f1<-cbind(t(ci.n.f),t(ci.n.r))
  
  
  
  
  list(
       
    
      
    georg.jef9=c(res.georg.jef9,c(t(ci.georg.jef.f19)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, ridge for REs, with only one pseudo with new ID
    
    
    mspl=c(res.mspl,c(t(ci.mspl.f1)),true.kos), #Kosmidis
    t=c(res.t,c(t(ci.t.f1)),true.kos), #Bayes, t prior
    n=c(res.n,c(t(ci.n.f1)),true.kos)#, #Bayes, N prior
    #  helen=c(res.h,c(t(ci.h.f1)),true.h)
  ) #Ogden method
} 







my.sim.fast2<-function(jj,N,p,beta,b0,x.type="bernouli1",x.prob=0.3,var.random.inter=0.4,var.random.slope=0.2,cov.re=0.2,s=10,pen=1,m=1){
  
  dn<-paste("n",n,"N",N,"p",p,"beta",paste(beta,sep="."),"b0",b0,"x.type",x.type,"x.prob",x.prob,"var.re",var.random.inter,"var.sl",var.random.slope,sep="")
  sigma<-matrix(c(var.random.inter,cov.re,cov.re,var.random.slope),ncol=2)
  
  chsigma<-chol(sigma)
  
  true.kos<-c(log(diag(chsigma)[1]),chsigma[1,2],log(diag(chsigma)[2]))
  true.gmm<-c(sqrt(diag(sigma)),sigma[1,2]/prod(sqrt(diag(sigma))))
  true.h<-c(var.random.inter,NA,NA)
  
  true.kos<-c(b0,beta,true.kos)
  true.gmm<-c(b0,beta,true.gmm)
  true.h<-c(b0,beta,true.h)
  
  
  #for (jj in 1:M){
  
  flg<-TRUE
  while(flg==TRUE){
    #generate data
    
    x<-matrix(NA,ncol=p,nrow=1)
    y<-NA
    id<-NA
    pii<-list()
    for (i in 1:N){
      n<-floor(runif(1,min=10,max=20))
      if (x.type=="norm") xi<-matrix(rnorm(n*p),ncol=p)
      if (x.type=="bernouli1") xi<-matrix(rbinom(n*p,prob=x.prob,size=1),ncol=p)
      if (x.type=="bernouli2") xi<-matrix(rep(rbinom(p,prob=x.prob,size=1),each=n),ncol=p)
      
      #random.intercept<- rnorm(1,mean=0,sd=sqrt(var.random.inter))
      #b1<-rnorm(1,mean=0,sd=sqrt(var.random.slope))
      
      re<-rmvnorm(1, mean = rep(0, nrow(sigma)), sigma = sigma)
      random.intercept<-re[1]
      bi<-re[2]
      
      
      betas<-c(random.intercept+b0,beta[1]+bi,beta[-1])
      xm<-cbind(1,xi)
      
      id.i<-rep(i,each=n)
      
      mui<- xm%*%matrix(betas,ncol=1) 
      pi<-1/(1+exp(-mui))
      pii[[i]]<-pi
      y.i<-rbinom(n,size=1,prob=pi)
      
      x<-rbind(x,xi)
      y<-c(y,y.i)
      id<-c(id,id.i)
      
    }
    xdf<-as.data.frame(x)
    nm<-names(xdf)
    if (sum(apply(as.matrix(xdf[-1,1:p],ncol=p,nrow=nrow(xdf)-1),2,sum)==0)==0) flg=FALSE else flg=TRUE
  }
  
  #start analysis
  true.pi<-unlist(pii)
  
  xdf$y<-y
  xdf$id<-id
  
  
  xdf<-xdf[-1,]
  
  data <- list(Y = xdf$y,
               X = model.matrix(
                 ~ V1+V2, data = xdf),
               Z = cbind(
                 rep(1, nrow(xdf)),
                 xdf$V1),
               M = rep(1, nrow(xdf)),
               grouping = xdf$id)
  p <- ncol(data$X)
  q <- max(1, ncol(data$Z))
  npar <- p + 0.5 * q * (q + 1)
    getCI<-function(x){
    cbind(x[,1]-1.96*x[,2],x[,1]+1.96*x[,2])
  }
  getsigma<-function(x,p){
    L<-rbind(c(exp(x[p+1,1]),0),
             c(x[p+2,1],exp(x[p+3,1])))
    L%*%t(L)
  }
  
  
  
  getCI.var<-function(x,p){
    vrs<-x[(p+1):(nrow(x)),] 
    
    
    list(vrs[,1],vrs[,2],vrs[,3])
  }
  
  #sum.ci<-function(l,u){
  #  cbind(c(diag(l),l[1,2]),c(diag(u),u[1,2]))
  #}
 # logistf(Y~-1+X,data=data)
  
  sum.ci<-function(l,u){
    cbind(l,u)
  }
     sigma2<-matrix(c(1000,0,0,1000),ncol=2)
   
  #   gmm.fit.tmb<- try(glmmTMB(Y~-1+X+(-1+Z|grouping),data=data,
   #                           family=binomial(link="logit")),silent=TRUE)
     
     
georg.jef9<-try(georg.glmm.general.v7(data=data,tol=1e-6,maxIter=25,useFact = TRUE,
                                           s=100,prior.sigma=sigma,useFact2 = FALSE),
                     silent=TRUE)
     
#georg.jef8<-try(georg.glmm.general.v8(data=data,tol=1e-6,maxIter=25,useFact = FALSE,
 #                                       s=100,prior.sigma=sigma,useFact2 = FALSE),
  #                silent=TRUE)

georg.jef8<-try(georg.glmm.general.v9(data=data,tol=1e-6,maxIter=25,useFact = FALSE,
                                      useFact2 = FALSE),
                silent=TRUE)
#YY<-as.matrix(my_Y(Y=data$Y,X=data$X,Z=data$Z,id=data$grouping))
#XX<-as.matrix(my_T(X=data$X,Z=data$Z,id=data$grouping))

#ff<-logistf(YY~-1+XX)

  if (class(georg.jef9)=="try-error"){
    ff.georg.jef9<-rep(NA,p)
    sigma.georg.jef9<-rep(NA,length(c(sigma)))
    
    ci.georg.jef.f9<-matrix(NA,ncol=2,nrow=p)
    ci.georg.jef.r9<-matrix(NA,ncol=2,nrow=3)
    
    
  } else {
    sigma.georg.jef9<-matrix(summary(georg.jef9)$varcor$cond$grouping[1:4],ncol=2)
    ff.georg.jef9<-fixef(georg.jef9)$cond
    
    
    ci.georg.jef9<-getCI.var(confint(georg.jef9),p=p)
    ci.georg.jef.f9<-confint(georg.jef9)[1:p,1:2]
    ci.georg.jef.r.l9<-ci.georg.jef9[[1]]
    ci.georg.jef.r.u9<-ci.georg.jef9[[2]]
    
    ci.georg.jef.r9<-sum.ci(ci.georg.jef.r.l9,ci.georg.jef.r.u9)
    
    
  }
  
  
if (class(georg.jef8)=="try-error"){
  ff.georg.jef8-rep(NA,p)
  sigma.georg.jef8<-rep(NA,length(c(sigma)))
  
  ci.georg.jef.f8<-matrix(NA,ncol=2,nrow=p)
  ci.georg.jef.r8<-matrix(NA,ncol=2,nrow=3)
  
  
} else {
  sigma.georg.jef8<-matrix(summary(georg.jef8)$varcor$cond$grouping[1:4],ncol=2)
  ff.georg.jef8<-fixef(georg.jef8)$cond
  
  
  ci.georg.jef8<-getCI.var(confint(georg.jef8),p=p)
  ci.georg.jef.f8<-confint(georg.jef8)[1:p,1:2]
  ci.georg.jef.r.l8<-ci.georg.jef8[[1]]
  ci.georg.jef.r.u8<-ci.georg.jef8[[2]]
  
  ci.georg.jef.r8<-sum.ci(ci.georg.jef.r.l8,ci.georg.jef.r.u8)
  
  
}
   
  mc<-function(x){
    c(diag(x),x[1,2])
  }
  
  
  
  
  res.georg.jef9<-c( ff.georg.jef9,mc(sigma.georg.jef9))
  
  
  ci.georg.jef.f19<-cbind(t(ci.georg.jef.f9),t(ci.georg.jef.r9))
   
  res.georg.jef8<-c( ff.georg.jef8,mc(sigma.georg.jef8))
  
  
  ci.georg.jef.f18<-cbind(t(ci.georg.jef.f8),t(ci.georg.jef.r8))
  
  ###!CIs for REs for Helen are for var(b0)
  ###!CIs for REs for Kosmidis methods (mspl, t, n) are for log(diag(L)) and L[1,2] where L is lower chol of Sigma
  ###!CIs for RES for all methods based on glmmTMB are for sqrt(diag(Sigma)) and Cor[1,2] where Cor is correlation matrix of Sigma
  
  
    
  
  
  
  list(
    
    
    georg.jef8=c(res.georg.jef8,c(t(ci.georg.jef.f18)),true.gmm), #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, ridge for REs, with only one pseudo with new ID
    
    georg.jef9=c(res.georg.jef9,c(t(ci.georg.jef.f19)),true.gmm)  #rok's method other hat matrix, not fitting Firth, new ids for pseudo data, ridge for REs, with only one pseudo with new ID
    
    
    
    #  helen=c(res.h,c(t(ci.h.f1)),true.h)
  ) #Ogden method
} 



M=100
p=2
betas=c(8,1)
b0=-1
var.random.inter=1
var.random.slope=5
cov.re=0.5
tr<-c(b0,betas,var.random.inter,cov.re,cov.re,var.random.slope)
pn<-max(c(var.random.inter,var.random.slope,cov.re))
zz=0
#for (n in c(5,10,20,50)){
#  for (N in c(10,20,50)){

   for (N in c(10,20,50,100)){
    
    
    #n=10
    #N=20
    zz=zz+1
    
    resgj9<-
      resgj8 <-
      matrix(NA,nrow=M,ncol=(p+1+3)*4)
    
    
    for (ii in 1:M){
      
      resi<-try(my.sim.fast2(jj=1, N=N,p=p,beta=betas,b0=b0,x.type="bernouli1",x.prob=0.3,var.random.inter=var.random.inter,var.random.slope=var.random.slope,cov.re=cov.re,s=10, pen=pn,m=1),silent=TRUE)
      
      #resi<-try(my.sim(jj=1,n=n,N=N,p=p,beta=betas,b0=b0,x.type="bernouli2",x.prob=0.3,var.random.inter=var.random.inter,var.random.slope=var.random.slope,cov.re=cov.re,s=10, pen=pn,m=1),silent=TRUE)
      if (class(resi)!="try-error"){
        resgj9[ii,]<-resi$georg.jef9
        #resF3[ii,]<-resi$Fprior3
        resgj8[ii,]<-resi$georg.jef8
         
         
      } 
      print(ii)
    }
    
    df.r<-rbind(resgj9,#resF3,
                resgj8 )
    df.r2<-as.data.frame(df.r)
    names(df.r2)<-c(c("intercept","beta1","beta2",
                      "sigma2int","sigma2sl","cov"),
                    paste(c("intercept","beta1","beta2",
                            "sigma2int","sigma2sl","cov"),"ci.low",sep=""),
                    paste(c("intercept","beta1","beta2",
                            "sigma2int","sigma2sl","cov"),"ci.up",sep=""),
                    paste(c("intercept","beta1","beta2",
                            "sigma2int","sigma2sl","cov"),"true",sep="")
    )
    df.r2$meth<-rep(c("Rok","Rokf" ),each=M)
    
    df.r2$n<-n
    df.r2$N<-N
    df.r2$tbeta0<-b0
    df.r2$tbeta1<-betas[1]
    df.r2$tbeta2<-betas[2]
    df.r2$var.random.inter<-var.random.inter
    df.r2$var.random.slope<-var.random.slope
    df.r2$cov.re<-cov.re
    
    if(zz==1) df.res.f<-df.r2 else df.res.f<-rbind(df.res.f,df.r2)
    
  }#}


hit<-function(i,l,u,t){
  ifelse(l[i,]<=t[i,]&u[i,]>=t[i,],1,0)  
}

hits<- matrix(unlist(lapply(1:nrow(df.res.f),hit,df.res.f[,((p+1+3)+1):((p+1+3)*2)],
                           df.res.f[,((p+1+3)*2+1):((p+1+3)*3)],
                           df.res.f[,((p+1+3)*3+1):((p+1+3)*4)])),byrow=TRUE,ncol=p+1+3)

hits<-as.data.frame(hits)
names(hits)<-paste(c("intercept","beta1","beta2",
                     "sigma2int","sigma2sl","cov"),"hits",sep="")

df.res.f<-cbind(df.res.f,hits)

my_mean<-function(x){mean(x,na.rm=T)}



sbsM<-1:nrow(df.res.f)
#sbsM<-which(df.res.f$meth%in%c("Rok","F11.3","RH2.2","RH2.1","RH2","RH","F","F11","F11.2","Ri,C",


#                              "R","R2", "K"))

#sbsM<-which(df.res.f$meth%in%c("Rok", "K"))

pi0<-ggplot(df.res.f[sbsM,], aes(x = meth, y = intercepthits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi1<-ggplot(df.res.f[sbsM,], aes(x = meth, y = beta1hits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi2<-ggplot(df.res.f[sbsM,], aes(x = meth, y = beta2hits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)


pi3<-ggplot(df.res.f[sbsM,], aes(x = meth, y = sigma2inthits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi4<-ggplot(df.res.f[sbsM,], aes(x = meth, y = sigma2slhits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi5<-ggplot(df.res.f[sbsM,], aes(x = meth, y = covhits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)






p0 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=intercept-tbeta0)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)
p1 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=beta1-tbeta1)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)

p2 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=beta2-tbeta2)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)


p3 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=sigma2int-var.random.inter)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)
p4 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=sigma2sl-var.random.slope)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)
p5 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=cov-cov.re)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)






M=100
p=2
betas=c(4,2)
b0=-1
var.random.inter=1
var.random.slope=5
cov.re=0.5
tr<-c(b0,betas,var.random.inter,cov.re,cov.re,var.random.slope)
pn<-max(c(var.random.inter,var.random.slope,cov.re))
zz=0
#for (n in c(5,10,20,50)){
#  for (N in c(10,20,50)){

    for (n in c(5,10,20)){
      for (N in c(10,50)){
    
    
#n=10
#N=20
zz=zz+1

resgj9<-
resgj6<-resgj7<-resgj8<-resF3<-
resgj5<-resgj4<-resF<-resF2<-resrro<-resh<- resf<- resml<- resgj<-resgj2<-resgj3<-resgn<-resgr<- resik<-resit<-resin<-
   matrix(NA,nrow=M,ncol=(p+1+3)*4)


for (ii in 1:M){

  resi<-try(my.sim.fast(jj=1,n=n,N=N,p=p,beta=betas,b0=b0,x.type="bernouli1",x.prob=0.3,var.random.inter=var.random.inter,var.random.slope=var.random.slope,cov.re=cov.re,s=10, pen=pn,m=1),silent=TRUE)
  
#resi<-try(my.sim(jj=1,n=n,N=N,p=p,beta=betas,b0=b0,x.type="bernouli2",x.prob=0.3,var.random.inter=var.random.inter,var.random.slope=var.random.slope,cov.re=cov.re,s=10, pen=pn,m=1),silent=TRUE)
if (class(resi)!="try-error"){
  resgj9[ii,]<-resi$georg.jef9
  #resF3[ii,]<-resi$Fprior3
  #resgj8[ii,]<-resi$georg.jef8
  #resgj7[ii,]<-resi$georg.jef7
  #resgj6[ii,]<-resi$georg.jef6
  #resgj5[ii,]<-resi$georg.jef5
  #resgj4[ii,]<-resi$georg.jef4
  #resF[ii,]<-resi$Fprior
  #resF2[ii,]<-resi$Fprior2
  #resrro[ii,]<-resi$ridge
  #resh[ii,]<-resi$helen
  #resf[ii,]<-resi$frth
  #resml[ii,]<-resi$ml
  #resgj[ii,]<-resi$georg.jef
  
  #resgn[ii,]<-resi$georg.ns
  #resgr[ii,]<-resi$georg.rr
  #resgj2[ii,]<-resi$georg.jef2
  #resgj3[ii,]<-resi$georg.jef3
  resik[ii,]<-resi$mspl
  resit[ii,]<-resi$t
  resin[ii,]<-resi$n
} 
print(ii)
}

 df.r<-rbind(resgj9,#resF3,resgj8,resgj7,resgj6,resgj5,resgj4,
             #resF,resF2,resrro,
             #resh,
             #resf,
             #resml,
             #resgj,
             #resgn,
             #resgr,
             #resgj2,
             #resgj3,
             resik,
             resit,
             resin)
 df.r2<-as.data.frame(df.r)
 names(df.r2)<-c(c("intercept","beta1","beta2",
                 "sigma2int","sigma2sl","cov"),
 paste(c("intercept","beta1","beta2",
                   "sigma2int","sigma2sl","cov"),"ci.low",sep=""),
 paste(c("intercept","beta1","beta2",
         "sigma2int","sigma2sl","cov"),"ci.up",sep=""),
 paste(c("intercept","beta1","beta2",
         "sigma2int","sigma2sl","cov"),"true",sep="")
 )
 df.r2$meth<-rep(c("Rok",#"F11.3","RH2.3","RH2.2","RH2.1","RH2","RH","F11","F11.2","Ri,C",#"H",
               #"F","ML","G",
               #"R,npZ","Ri,I",
               #"R","R2",
               "K","B,t","B,N"),each=M)
 
 df.r2$n<-n
 df.r2$N<-N
 df.r2$tbeta0<-b0
 df.r2$tbeta1<-betas[1]
 df.r2$tbeta2<-betas[2]
 df.r2$var.random.inter<-var.random.inter
 df.r2$var.random.slope<-var.random.slope
 df.r2$cov.re<-cov.re
 
 if(zz==1) df.res.f<-df.r2 else df.res.f<-rbind(df.res.f,df.r2)
 
  }}


hit<-function(i,l,u,t){
  ifelse(l[i,]<=t[i,]&u[i,]>=t[i,],1,0)  
}

hits<-matrix(unlist(lapply(1:nrow(df.res.f),hit,df.res.f[,((p+1+3)+1):((p+1+3)*2)],
       df.res.f[,((p+1+3)*2+1):((p+1+3)*3)],
       df.res.f[,((p+1+3)*3+1):((p+1+3)*4)])),byrow=T,ncol=p+1+3)

hits<-as.data.frame(hits)
names(hits)<-paste(c("intercept","beta1","beta2",
                     "sigma2int","sigma2sl","cov"),"hits",sep="")

df.res.f<-cbind(df.res.f,hits)

my_mean<-function(x){mean(x,na.rm=T)}



sbsM<-1:nrow(df.res.f)
#sbsM<-which(df.res.f$meth%in%c("Rok","F11.3","RH2.2","RH2.1","RH2","RH","F","F11","F11.2","Ri,C",
  
                               
 #                              "R","R2", "K"))

sbsM<-which(df.res.f$meth%in%c("Rok", "K"))

pi0<-ggplot(df.res.f[sbsM,], aes(x = meth, y = intercepthits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi1<-ggplot(df.res.f[sbsM,], aes(x = meth, y = beta1hits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi2<-ggplot(df.res.f[sbsM,], aes(x = meth, y = beta2hits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)


pi3<-ggplot(df.res.f[sbsM,], aes(x = meth, y = sigma2inthits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi4<-ggplot(df.res.f[sbsM,], aes(x = meth, y = sigma2slhits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)

pi5<-ggplot(df.res.f[sbsM,], aes(x = meth, y = covhits)) + 
  geom_point(stat = "summary", fun = "my_mean")+
  facet_grid(N~n )+
  geom_hline(yintercept=0.95)






p0 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=intercept-tbeta0)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)
p1 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=beta1-tbeta1)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)

p2 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=beta2-tbeta2)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)


p3 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=sigma2int-var.random.inter)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)
p4 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=sigma2sl-var.random.slope)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)
p5 <- ggplot(df.res.f[sbsM,] , aes(x=meth, y=cov-cov.re)) + 
  geom_boxplot()+
  facet_grid(N~n,scales = "free_y" )+
  geom_hline(yintercept=0)

df.res.f1ci<-df.res.f


df.res.f4<-df.res.f



df.res.f1<-df.res.f
df.res.f3<-df.res.f
df.res.f2<-df.res.f

df.f<-rbind(df.res.f1,df.res.f2,df.res.f3)
df.f<-rbind(df.f,df.res.f)
save(df.f,file="results.Rdata")
 df.r2<-df.r2[-which(df.r2$meth=="H"),]
 p0 <- ggplot(df.r2 , aes(x=meth, y=intercept)) + 
   geom_boxplot()
 p1<- ggplot(df.r2 , aes(x=meth, y=beta1)) + 
   geom_boxplot()
 p2<- ggplot(df.r2 , aes(x=meth, y=beta2)) + 
   geom_boxplot()
 p3<- ggplot(df.r2 , aes(x=meth, y=sigma2int)) + 
   geom_boxplot()
 
 p4<- ggplot(df.r2 , aes(x=meth, y=cov)) + 
   geom_boxplot()
 p5<- ggplot(df.r2 , aes(x=meth, y=sigma2sl)) + 
   geom_boxplot()
 
 grid.arrange(p0,p1,p2,p3,p4,p5,ncol=2)
 
 nsim<-100
  
  par(mfrow=c(4,3),mar=c(2,2,4,1))
  boxplot(t(t(resml)-tr),main="ML")
  abline(h=0)
  boxplot(t(t(resf)-tr),main="Firth")
  abline(h=0)
  boxplot(t(t(resh)-tr),main="Ogden")
  abline(h=0)
  boxplot(t(t(resgj)-tr),main="Georg")
  abline(h=0)
  boxplot(t(t(resgj2)-tr),main="Rok")
  abline(h=0)
  boxplot(t(t(resgn)-tr),main="Rok, no pen Z")
  abline(h=0)
  boxplot(t(t(resgr)-tr),main="Ridge,indep nor prior")
  abline(h=0)
  boxplot(t(t(resrro)-tr),main="Ridge,correct sigma")
  abline(h=0)
  boxplot(t(t(resik)-tr),main="Kosmidis")
  abline(h=0)
  boxplot(t(t(resit)-tr),main="Bayes, t")
  abline(h=0)
  boxplot(t(t(resin)-tr),main="Bayes, N")
  abline(h=0)
  
  apply(resrro[1:nsim,],2,mean)-tr
  apply(resrro[1:nsim,],2,var)
  sqrt((apply(resrro[1:nsim,],2,mean)-tr)**2+apply(resrro[1:nsim,],2,var))
  
  
  apply(resh[1:nsim,],2,mean)-tr
  apply(resh[1:nsim,],2,var)
  sqrt((apply(resh[1:nsim,],2,mean)-tr)**2+apply(resh[1:nsim,],2,var))
  
  
    
apply(resml[1:nsim,],2,mean)-tr
apply(resml[1:nsim,],2,var)
sqrt((apply(resml[1:nsim,],2,mean)-tr)**2+apply(resml[1:nsim,],2,var))

apply(resf[1:nsim,],2,mean)-tr
apply(resf[1:nsim,],2,var)
sqrt((apply(resf[1:nsim,],2,mean)-tr)**2+apply(resf[1:nsim,],2,var))



apply(resgj[1:nsim,],2,mean)-tr
apply(resgj[1:nsim,],2,var)
sqrt((apply(resgj[1:nsim,],2,mean)-tr)**2+apply(resgj[1:nsim,],2,var))

apply(resgj2[1:nsim,],2,mean)-tr
apply(resgj2[1:nsim,],2,var)
sqrt((apply(resgj2[1:nsim,],2,mean)-tr)**2+apply(resgj2[1:nsim,],2,var))


apply(resgn[1:nsim,],2,mean)-tr
apply(resgn[1:nsim,],2,var)
sqrt((apply(resgn[1:nsim,],2,mean)-tr)**2+apply(resgn[1:nsim,],2,var))

apply(resgr[1:nsim,],2,mean)-tr
apply(resgr[1:nsim,],2,var)
sqrt((apply(resgr[1:nsim,],2,mean)-tr)**2+apply(resgr[1:nsim,],2,var))


apply(resik[1:nsim,],2,mean)-tr
apply(resik[1:nsim,],2,var)
sqrt((apply(resik[1:nsim,],2,mean)-tr)**2+apply(resik[1:nsim,],2,var))

apply(resit[1:nsim,],2,mean)-tr
apply(resit[1:nsim,],2,var)
sqrt((apply(resit[1:nsim,],2,mean)-tr)**2+apply(resit[1:nsim,],2,var))

apply(resin[1:nsim,],2,mean)-tr
apply(resin[1:nsim,],2,var)
sqrt((apply(resin[1:nsim,],2,mean)-tr)**2+apply(resin[1:nsim,],2,var))


