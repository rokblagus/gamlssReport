

library(gamlss)
data(aids)

set.seed(1)
aids$z<-runif(nrow(aids))

fit<-gamlss(y~pb(z,df=10)+qrt+pb(x,df=5),data=aids,family=PO)
m<-gamlssReport(fit)
m2<-gamlssReport(fit,extract.smooth = TRUE)

newm<-data.frame(qrt="3",z=0.25,x=2)
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link")

mp2<-predict.gamlssReport(m2,newm,gamlss.prediction = TRUE)$lp$mu


plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)

newm2<-aids[aids$qrt==3,]
newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"

mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids[aids$qrt==3,],what="mu",type="link")

plot(aids$z[aids$qrt==3],mp2,type="p",col="red",xlim=c(0,1))
points(aids$z[aids$qrt==3],gp2,pch="X")

lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")

mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(qrt=3,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")

plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)







library(gamlssReport)
library(gamlss)
data(aids)

set.seed(1)
aids$z<-runif(nrow(aids))

fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit)

newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")

plot(aids$z,aids$y,pch=16)

lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)

newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"

mp2<-predict(m,newm2)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")

points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch=4)
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,4),col=c("black","red","black"),bty="n")

#if we want the same

library(gamlssReport)
library(gamlss)
data(aids)

set.seed(1)
aids$z<-runif(nrow(aids))

fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit,extract.smooth = TRUE)

newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm,gamlss.prediction =TRUE)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")

plot(aids$z,aids$y,pch=16)

lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
#exactly the same!

newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"

mp2<-predict(m,newm2,gamlss.prediction =TRUE)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")

points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch=4)
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,4),col=c("black","red","black"),bty="n")



zz<-seq(from=min(aids$z),to=max(aids$z),length.out = 10000)

mp3<-predict(m,newm2)$lp$mu
mp4<-cbind(1,newm2$z)%*%matrix(m$coef.beta$mu,ncol=1)
s<-mp3-mp4 #the same as fit$mu.s
ss<-spline(x=aids$z,y=s,xout=zz)
predl<-cbind(1,zz)%*%matrix(m$coef.beta$mu,ncol=1)+ss$y
pred<-exp(predl)
lines(ss$x,pred,col="magenta")


ss<-spline(x=aids$z,y=s,xout=zz,method="natural")
predl<-cbind(1,zz)%*%matrix(m$coef.beta$mu,ncol=1)+ss$y
pred<-exp(predl)
lines(ss$x,pred,col="green")

legend("bottomleft",legend=c("natural","fmm"),lty=1,col=c("green","magenta"))

plot(pred-gp)
#why the fuck do they use natural spline???


#gamlss is doing
fuckups<-exp(cbind(1,zz)%*%matrix(m$coef.beta$mu,ncol=1)+spline(x=aids$z,y=fit$mu.s,xout=zz,method="natural")$y)
fuckups-gp


##
object<-fit
what="mu"
type="reponse"
newdata=aids
terms = NULL
se.fit = FALSE
parameter = NULL
data=NULL

#go into predict to see what exactly do we need
concat <- function(..., names=NULL)
{
  tmp <- list(...)
  if(is.null(names)) names <- names(tmp)
  if(is.null(names)) names <- sapply( as.list(match.call()), deparse)[-1]
  if( any(
    sapply(tmp, is.matrix)
    |
    sapply(tmp, is.data.frame) ) )
  {
    len <- sapply(tmp, function(x) c(dim(x),1)[1] )
    len[is.null(len)] <- 1
    data <- rbind( ... )
  }
  else
  {
    len <- sapply(tmp,length)
    data <- unlist(tmp)
  }
  namelist <- factor(rep(names, len), levels=names)
  return( data.frame( data, source=namelist) )
}


Call <- object$call

data<- data1 <-eval(Call$data)
data <- data[match(names(newdata),names(data))]
## merge the two data together
data <- concat(data,newdata)
parform <- formula(object, what)# object[[paste(what, "formula", sep=".")]]
parform[2] <- NULL

Terms <- terms(parform)

m <- model.frame(Terms, data, xlev = object[[paste(what,"xlevels",sep=".")]])
## model design matrix y and w
X <- model.matrix(Terms, data, contrasts = object$contrasts)
y <- object[[paste(what,"lp",sep=".")]]
w <- object[[paste(what,"wt",sep=".")]]

onlydata <- data$source == "data" # TRUE or FALSE
## whether additive terms are involved in the fitting
smo.mat <- object[[paste(what,"s",sep=".")]]

n.smooths <- dim(smo.mat)[2]
y <- (y - smo.mat %*% rep(1, n.smooths))

refit <- lm.wfit(X[onlydata,  , drop = FALSE], y, w)

refit$coef
fit$mu.coefficients


coef <- refit$coef         ## save the coefficints
nX <- dimnames(X)        ## the names of rows and columns
rownames <- nX[[1]][!onlydata] ## only the newdata rows
nrows <- sum(!onlydata)     ## the number of rows in the new data
nac <- is.na(coef)        ## whether they are NA in coefficients
assign.coef <- attr(X, "assign")  ## X is a matrix
collapse <- type != "terms"## !collapse is for whether type is not "terms"
Xpred <- X[!onlydata,]
Xpred <- matrix(Xpred, nrow=nrows) # I think this probably is not needed sinse allready a matrix



pred <- drop(Xpred[, !nac, drop = FALSE] %*% coef[!nac]) ##these are linear predictions



smooth.labels <- dimnames(smo.mat)[[2]]       ## getting the labels i.e. "pb(Fl)" "pb(A)"
pred.s <- array(0, c(nrows, n.smooths), list(names(pred),
                                             dimnames(smo.mat)[[2]])) ## creating the prediction matrix
# smooth.labels[smooth.labels%in%colnames(X)]
# smooth.wanted <- smooth.labels[match(smooth.labels, colnames(X), 0) > 0]
## getting the smoothing call
smooth.calls <- lapply(m[smooth.labels], attr, "call") # i.e $`pb(Fl)`
#     gamlss.pb(data[["pb(Fl)"]], z, w)
data <- subset(m, onlydata, drop=FALSE)        ## get the  original data
attr(data, "class") <- NULL                                   ## note that m is the data.frame with all data
new.m <- subset(m, !onlydata, drop=FALSE)       ## get the new data
attr(new.m, "class") <- NULL

residuals <-  object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]] #these are the key!


TT<-smooth.labels[1]

nm <- names(attributes(m[[TT]])) # first we get the names of all attributes
attributes(data[[TT]]) <- attributes(m[[TT]])[nm[-c(1,2)]]# then we pass all but

Call <- smooth.calls[[TT]] #
Call$xeval <- substitute(new.m[[TT]], list(TT = TT))
z <- residuals + smo.mat[, TT]

eval(Call)


#go into gamlss.pb

x=data[["pb(z, df = 10)"]]
y=z
w=w
xeval=new.m[["pb(z, df = 10)"]]

position <- 0

gamlss.environment <- sys.frame(position)
param <- get("what", envir = gamlss.environment)
object <- get("object", envir = gamlss.environment)
TT <- get("TT", envir = gamlss.environment)
smooth.labels <- get("smooth.labels", envir = gamlss.environment)
pred <- getSmo(object, parameter = param, which = which(smooth.labels ==
                                                          TT))$fun(xeval)
pred

#go into fun

ff<-getSmo(object, parameter = param, which = which(smooth.labels ==
                                                      TT))$fun

debugonce(ff)


















