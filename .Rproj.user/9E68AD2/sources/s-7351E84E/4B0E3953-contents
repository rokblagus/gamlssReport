
make_pseudo_data_rand_eigen_general_psi_v3_glmm<-function(psi,nu,const=1e8,param="precision",link_fun=function(x) 1/(1+exp(-x))){
  if (is.null(match.arg(param,c("precision","variance")))) stop("param needs to be one of: precision,variance")
  
  q<-ncol(psi)
  if (param=="precision") cc<-(nu-q-1)/q  
  if (param=="variance") cc<-(nu+q+1)/q
  
  cc<-max(c(floor(cc),1))
  if (param=="precision") true<-solve(psi)/cc
  if (param=="variance") true<-psi/cc
  ee<-eigen(true,TRUE)
  ui<-list()
  for (j in 1:q){
    ui[[j]]<-sqrt(ee$values[j])*ee$vectors[,j]
  }
  
  #u1<-sqrt(ee$values[1])*ee$vectors[,1]
  #u2<-sqrt(ee$values[2])*ee$vectors[,2]
  
  #matrix(u1,ncol=1)%*%matrix(u1,nrow=1)+matrix(u2,ncol=1)%*%matrix(u2,nrow=1)
  pi<-list()
  
  for (j in 1:length(ui)){
    I<-diag(rep(1,length(ui[[j]])))
    #pi[[j]]<-1/(1+exp(-I%*%matrix(ui[[j]],ncol=1)))
    pi[[j]]<-link_fun(I%*%matrix(ui[[j]],ncol=1))
  }
  #pi0=exp(u1[1])/(1+exp(u1[1]))
  #pi1=exp(u1[2])/((1-pi0)/pi0+exp(u1[2]))
  
  #pi02=exp(u2[1])/(1+exp(u2[1]))
  #pi12=exp(u2[2])/((1-pi02)/pi02+exp(u2[2]))
  
  
  #Y<-c(pi0,pi1,pi02,pi12)*1e8 #the constant improves the convergence!
  Y<-unlist(pi)
  
  #id<-c(1,1,2,2)
  id<-rep(1:q,each=q)
  n<-rep(const,length(id))
  
  Zi<-matrix(0,ncol=q,nrow=q)
  
  for (j in 1:q){
    Zi[j,j]<-1
  }
  for (j in 1:q){
    if (j==1) Z=Zi else Z<-rbind(Z,Zi)
  }
  
  fact<-cc
  if (fact>1){
    Y<-rep(Y,fact)
    n<-rep(n,fact)
    id<-rep(1:(q*fact),each=q)
    for (j in 1:(q*fact)){
      if (j==1) Z=Zi else Z<-rbind(Z,Zi)
    }
  }
  
  #M<-rep(1/q,length(Y))
  #Z<-rbind(c(1,0),c(1,1),c(1,0),c(1,1))
  #data0<-list(Y=Y,grouping=id,nn=n,Z=Z,M=M)
  data0<-list(Y=Y,grouping=id,nn=n,Z=Z)
  
  #fit0<-glmmTMB(cbind(Y,nn-Y)~-1+(-1+Z|grouping),weights=M,data=data0,family=binomial)
  #fit0<-glmmTMB(cbind(Y,nn-Y)~-1+(-1+Z|grouping),data=data0,family=binomial)
  #est.vcv<-VarCorr(fit0)$cond$grouping[1:q,1:q]
  
  list(data=data0)#,fit=fit0,vcv.re=est.vcv)
}





dd<-read.table("C:\\Users\\rblagus\\Dropbox (MF Uni LJ)\\Vienna2017\\MixedSeparation\\realData/dataBirds.txt",header=T,dec=",",sep="\t",fill=TRUE)


fit.re.1<-glmer(parasites~migration+food+(migration|Phylogenetic.Tomi),data=dd,family=binomial(link="logit"))
fit.re.0<-glmer(parasites~migration+food+(1|Phylogenetic.Tomi)+(0+migration|Phylogenetic.Tomi),data=dd,family=binomial(link="logit"))


X<-model.matrix(~migration+food,data=dd)
Z<-model.matrix(~migration,data=dd)
grouping<-as.numeric(dd$Phylogenetic.Tomi)
Y<-dd$parasites
n<-rep(1,length(Y))


xdf<-list(X=X,Z=Z,grouping=grouping,Y=Y,n=n)


fittm<-glmmTMB(cbind(Y,n-Y)~-1+X+(-1+Z|grouping),data=xdf,family=binomial)


psi<-rbind(c(10,1),c(1,3))
nu=3
###data augmn
 
pd<-make_pseudo_data_rand_eigen_general_psi_v3_glmm(psi,nu=nu,const=1e8,param="precision",link_fun=function(x) 1/(1+exp(-x)))


Xa<-rbind(X,matrix(0,ncol=ncol(X),nrow=nrow(pd$data$Z)))
Za<-rbind(Z,pd$data$Z)
groupinga<-c(grouping,max(grouping)+pd$data$grouping)
Ya<-c(Y/n,pd$data$Y)
#na<-c(n,rep(1,length(pd$data$nn)))
weightsa<-c(n,pd$data$nn)

xdfa2<-list(X=Xa,Z=Za,grouping=groupinga,Y=Ya,weights=weightsa)

tmp2 <- glmmTMB(Y~-1+X+(-1+Z|grouping), family = binomial(link = "logit"),
                weights = weights,
                data=xdfa2)

VarCorr(tmp2)

