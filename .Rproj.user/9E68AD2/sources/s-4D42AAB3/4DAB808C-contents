---
title: "visokorazs_seminarska_sim"
author: "Matej Gregorc"
date: "`r Sys.Date()`"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(gbm)
library(MASS)
library(caret)
library(rsample)
library(pROC)
library(kernelshap)
library(treeshap)
library(shapviz)
library(doParallel)
library(dplyr)
library(ggplot2)
library(reshape2)
library(knitr)
library(tables)
```



```{r funkcije}
#### SIMULACIJA PODATKOV ####
sim_data <- function(n, prob1, p, d, mu_d) {
  #Y variable -> based on prob1
Y <- sample(c(rep(1, n*prob1), rep(0, n*(1-prob1))))

  #cov_matrix for variance = 1
cov_matrix <- matrix(0, nrow = p, ncol = p)
diag(cov_matrix) <- rep(1, p)

  #using multivariate normal distribution for all X variables
Xmat <- mvrnorm(n = n, mu = rep(0, p), Sigma = cov_matrix )

  #first d variables have different mean
cov_matrix_d <- cov_matrix[1:ncol(Xmat[Y == 1,1:d]), 1:ncol(Xmat[Y == 1,1:d])]
Xmat[Y == 1,1:d] <- mvrnorm(n = nrow(Xmat[Y == 1,1:d]), mu = rep(mu_d, ncol(Xmat[Y == 1,1:d])), Sigma = cov_matrix_d )
  
colnames(Xmat) <- c(paste0("Var", 1:p))


return(cbind(Y, Xmat))
}


#### RELATIVE IMPORTANCE ####
relimp_topd <- function(mod, d){
      var_inf <- summary(mod, plotit = FALSE)
      var_inf_topd <- var_inf[1:d, ]

      relimp_pravilno_izrazene <- sum(var_inf_topd$var %in% vplivne_spr)
      relimp_napacno_izrazene <- d - relimp_pravilno_izrazene

      relimp_delez_pravilno <-  relimp_pravilno_izrazene/d
      
      return(c(relimp_pravilno_izrazene, relimp_napacno_izrazene, relimp_delez_pravilno))
      
}

#### SHAP VALUES ####
shap_topd <- function(mod, d, train_data){
      
  unif <- gbm.unify(mod, train_data)
      shap_vals <- treeshap(unif, train_data)
      mean_shap <- colMeans(abs(shap_vals$shaps))
      mean_shap_or <- mean_shap[order(mean_shap, decreasing = TRUE)]
      mean_shap_topd <- mean_shap_or[1:d]
      
      shap_pravilno_izrazene <- sum(names(mean_shap_topd) %in% vplivne_spr)
      shap_napacno_izrazene <- d - shap_pravilno_izrazene
      shap_delez_pravilno <- shap_pravilno_izrazene/d

      return(c(shap_pravilno_izrazene, shap_napacno_izrazene, shap_delez_pravilno))
}


```


```{r kombinacije}
p <- 500
n <- 50
k <- c(0.1, 0.25, 0.4)
d <- c(10, 15, 30)
mu_d <- c(0.5, 0.7, 0.9)

ntree <- 100
shrink <- c(0.01, 0.1, 1)
depth <- 1

kombinacije <- expand.grid(p, n, k, d, mu_d, ntree, shrink, depth)
colnames(kombinacije) <- c("p", "n", "k", "d", "mu_d", "ntree", "shrink", "depth")


```

```{r simulacije}
res_master_acc <- data.frame(matrix(nrow = 0, ncol = 13))
res_master_var_imp <- data.frame(matrix(nrow = 0, ncol = 14))
res_master_acc.ens <- data.frame(matrix(nrow = 0, ncol = 13))
res_master_var_imp.ens <- data.frame(matrix(nrow = 0, ncol = 14))

colnames(res_master_acc) <- c("n","p","prob1", "d",  "ntree","shrink",  "depth", "acc", "sens", "spec", "g_means","auc")

colnames(res_master_var_imp) <- c("n",  "p",  "prob1",  "d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")

#use foreach- faster
nC <- detectCores()

registerDoParallel(cores=nC-1)

for (j in 1:nrow(kombinacije)){
  komb_j <- kombinacije[j, ]
####INITIAL VALUES
n <- komb_j$n 
p <- komb_j$p 
prob1 <- komb_j$k 
d <- komb_j$d 
mu_d <- komb_j$mu_d
vplivne_spr <- c(paste0("Var", 1:d)) 


ntree <- komb_j$ntree 
shrink <- komb_j$shrink
depth <- komb_j$depth 
subsample <- 0.5 

n.sim <- 100 
n.ens <- 10

sim_res <- foreach(sim = 1:n.sim, .packages = c("MASS", "gbm", "treeshap", "caret", "pROC"), .combine = rbind)%dopar%{
  
    mat_full <- sim_data(n = n, prob1 = prob1, p = p, d = d, mu_d = mu_d)

    ######## DS-St_GrBoost #########
    #downsized data
    n1 <- sum(mat_full[,1] == 1)

    DS_mat_full <- mat_full[c(which(mat_full[,1] == 1), sample(which(mat_full[,1] == 0), n1)), ]
    
    #CV jackknife DS-St-GrBoost
    res_jackknife <- data.frame(matrix(nrow = 0, ncol = 2))
    sim_res_var_imp <- data.frame(matrix(nrow = 0, ncol = 14))

        for (i in 1:nrow(DS_mat_full)){
      
            train_full <- DS_mat_full[-i, ]
            test_full <- DS_mat_full[i, ]

  
            mod <- gbm(Y ~ . , data = data.frame(train_full),
                  distribution = "bernoulli",
                  n.trees = ntree,
                  interaction.depth = depth,
                  shrinkage = shrink,
                  bag.fraction = subsample,
                  n.minobsinnode = 1)

            pred_prob <- predict(mod, data.frame(t(test_full)), type = "response")
            pred_class <- ifelse(pred_prob >= 0.5, 1, 0)

            res_jackknife[i, ] <- cbind(test_full[1], pred_class)

            #variable importance
            relimp_tmp <- relimp_topd(mod, d)
      
            ##SHAP
            shap_tmp <- shap_topd(mod, d, train_full)
      
            sim_res_var_imp <- rbind(sim_res_var_imp, c(n,
                                 p,
                                 prob1,
                                 d,
                                 mu_d,
                                 ntree,
                                 shrink,
                                 depth,
                                 shap_tmp,
                                 relimp_tmp))
            colnames(sim_res_var_imp) <- c("n",  "p",  "prob1",  "d", "mu_d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")
      }



    #točnost napovedi - DS-St_GrBoost
    conf_mat <- confusionMatrix(factor(res_jackknife$X2), factor(res_jackknife$X1), positive = "1")

    acc <- conf_mat$overall[1]
    sens <- conf_mat$byClass[1]
    spec <- conf_mat$byClass[2]
    g_means <- sqrt(sens*spec)
    auc <- auc(res_jackknife$X1, res_jackknife$X2)

    sim_res_acc <- c(n,
                    p,
                    prob1,
                    d,
                    mu_d,
                    ntree,
                    shrink,
                    depth,
                    acc,
                    sens,
                    spec,
                    g_means,
                    auc)
    
    ######## Stohastic Ensemble #########

#CV jackknife
    res_jackknife.ens <- data.frame(matrix(nrow = 0, ncol = n.ens))
    sim_res_var_imp.ens <- data.frame(matrix(nrow = 0, ncol = 14))
    class_control <- data.frame(matrix(nrow = 0, ncol = n.ens))
for (ens in 1:n.ens){
    #downsized data
    n1.ens <- sum(mat_full[,1] == 1)

    DS_mat_full.ens <- mat_full[c(which(mat_full[,1] == 1), sample(which(mat_full[,1] == 0), n1.ens)), ]
    
    

        for (i in 1:nrow(DS_mat_full.ens)){
      
            train_full.ens <- DS_mat_full.ens[-i, ]
            test_full.ens <- DS_mat_full.ens[i, ]

  
            mod.ens <- gbm(Y ~ . , data = data.frame(train_full.ens),
                  distribution = "bernoulli",
                  n.trees = ntree,
                  interaction.depth = depth,
                  shrinkage = shrink,
                  bag.fraction = subsample,
                  n.minobsinnode = 1)

            res_jackknife.ens[i, ens] <- predict(mod.ens, data.frame(t(test_full.ens)), type = "link")
            class_control[i, ens] <- test_full.ens[1]


            #variable importance
            relimp_tmp.ens <- relimp_topd(mod.ens, d)
      
            ##SHAP
            shap_tmp.ens <- shap_topd(mod.ens, d, train_full.ens)
      
            sim_res_var_imp.ens <- rbind(sim_res_var_imp.ens, c(n,
                                 p,
                                 prob1,
                                 d,
                                 mu_d,
                                 ntree,
                                 shrink,
                                 depth,
                                 shap_tmp.ens,
                                 relimp_tmp.ens))
            colnames(sim_res_var_imp.ens) <- c("n",  "p",  "prob1",  "d", "mu_d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")
        }
    
}
    
    #sum ensemble rezultatov
    ens_res <- rowSums(res_jackknife.ens)
    ens_probs <- 1/(1+exp(-ens_res))
    ens_class <- ifelse(ens_probs >= 0.5, 1, 0)


    #točnost napovedi ensemble
    conf_mat.ens <- confusionMatrix(factor(ens_class), factor(DS_mat_full.ens[,1]), positive = "1")

    acc.ens <- conf_mat.ens$overall[1]
    sens.ens <- conf_mat.ens$byClass[1]
    spec.ens <- conf_mat.ens$byClass[2]
    g_means.ens <- sqrt(sens.ens*spec.ens)
    auc.ens <- auc(ens_class, DS_mat_full.ens[,1])

    sim_res_acc.ens <- c(n,
                    p,
                    prob1,
                    d,
                    mu_d,
                    ntree,
                    shrink,
                    depth,
                    acc.ens,
                    sens.ens,
                    spec.ens,
                    g_means.ens,
                    auc.ens)
    

    list(sim_res_acc, sim_res_var_imp, sim_res_acc.ens, sim_res_var_imp.ens)
  }

sim_res_acc <- matrix(unlist(sim_res[, 1], use.names = FALSE), ncol = 13, byrow = TRUE)
sim_res_var_imp <- do.call(rbind, sim_res[,2])

sim_res_acc.ens <- matrix(unlist(sim_res[, 3], use.names = FALSE), ncol = 13, byrow = TRUE)
sim_res_var_imp.ens <- do.call(rbind, sim_res[,4])

colnames(sim_res_acc) <- colnames(sim_res_acc.ens) <- c("n","p","prob1", "d", "mu_d",  "ntree","shrink",  "depth", "acc", "sens", "spec", "g_means","auc")
colnames(sim_res_var_imp) <- colnames(sim_res_var_imp.ens) <- c("n",  "p",  "prob1",  "d", "mu_d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")

res_master_var_imp <- rbind(res_master_var_imp, sim_res_var_imp)
res_master_acc <- rbind(res_master_acc, sim_res_acc)
res_master_var_imp.ens <- rbind(res_master_var_imp.ens, sim_res_var_imp.ens)
res_master_acc.ens <- rbind(res_master_acc.ens, sim_res_acc.ens)

}


```


```{r uvozi_rezultate}

load("./rezultati_sim_full.rdata")

```


```{r povprecja}
res_means_acc <- cbind(kombinacije, matrix(NA, nrow = nrow(kombinacije), ncol = 5))
colnames(res_means_acc) <- c(colnames(kombinacije), colnames(res_master_acc[,9:13]))

res_means_acc.ens <- cbind(kombinacije, matrix(NA, nrow = nrow(kombinacije), ncol = 5))
colnames(res_means_acc.ens) <- c(colnames(kombinacije), colnames(res_master_acc.ens[,9:13]))

res_means_varimp <- cbind(kombinacije, matrix(NA, nrow = nrow(kombinacije), ncol = 6))
colnames(res_means_varimp) <- c(colnames(kombinacije), colnames(res_master_var_imp[,9:14]))

res_means_varimp.ens <- cbind(kombinacije, matrix(NA, nrow = nrow(kombinacije), ncol = 6))
colnames(res_means_varimp.ens) <- c(colnames(kombinacije), colnames(res_master_var_imp.ens[,9:14]))

for (i in 1:nrow(kombinacije)){
  komb_i <- kombinacije[i, ]
  
  acc_res_i <- res_master_acc[which(res_master_acc$p == komb_i$p &
                                      res_master_acc$n == komb_i$n &
                                      res_master_acc$prob1 == komb_i$k &
                                      res_master_acc$d == komb_i$d &
                                      res_master_acc$ntree == komb_i$ntree &
                                      res_master_acc$shrink == komb_i$shrink &
                                      res_master_acc$depth == komb_i$depth), ]
  
  acc_means <- colMeans(acc_res_i[,9:13])
  
  res_means_acc[i, ] <- cbind(komb_i, rbind(acc_means))
  
  acc_res_i.ens <- res_master_acc.ens[which(res_master_acc.ens$p == komb_i$p &
                                      res_master_acc.ens$n == komb_i$n &
                                      res_master_acc.ens$prob1 == komb_i$k &
                                      res_master_acc.ens$d == komb_i$d &
                                      res_master_acc.ens$ntree == komb_i$ntree &
                                      res_master_acc.ens$shrink == komb_i$shrink &
                                      res_master_acc.ens$depth == komb_i$depth), ]
  
  acc_means.ens <- colMeans(acc_res_i.ens[,9:13])
  
  res_means_acc.ens[i, ] <- cbind(komb_i, rbind(acc_means.ens))
  
  
  varimp_res_i <- res_master_var_imp[which(res_master_var_imp$p == komb_i$p &
                                      res_master_var_imp$n == komb_i$n &
                                      res_master_var_imp$prob1 == komb_i$k &
                                      res_master_var_imp$d == komb_i$d &
                                      res_master_var_imp$ntree == komb_i$ntree &
                                      res_master_var_imp$shrink == komb_i$shrink &
                                      res_master_var_imp$depth == komb_i$depth), ]
  
  varimp_means <- colMeans(varimp_res_i[,9:14])
  
  res_means_varimp[i, ] <- cbind(komb_i, rbind(varimp_means))
  
  varimp_res_i.ens <- res_master_var_imp.ens[which(res_master_var_imp.ens$p == komb_i$p &
                                      res_master_var_imp.ens$n == komb_i$n &
                                      res_master_var_imp.ens$prob1 == komb_i$k &
                                      res_master_var_imp.ens$d == komb_i$d &
                                      res_master_var_imp.ens$ntree == komb_i$ntree &
                                      res_master_var_imp.ens$shrink == komb_i$shrink &
                                      res_master_var_imp.ens$depth == komb_i$depth), ]
  
  varimp_means.ens <- colMeans(varimp_res_i.ens[,9:14])
  
  res_means_varimp.ens[i, ] <- cbind(komb_i, rbind(varimp_means.ens))
  
  
  }



```


```{r vse skupaj - DS-St}
#spec&sens pri različnih k, d, mu_d in shrink za DS-St-GrBoost

ggplot(data = res_means_acc, aes(y = acc, x = k))+
  facet_grid(mu_d~d+shrink, labeller = label_both)+
  geom_point(aes(y = sens))+
  geom_line(aes(y = sens, color = "PAmin"))+
  geom_point(aes(y = spec))+
  geom_line(aes(y = spec, color = "PAmaj"))+
  theme_light()+
  labs(color = "",
       y = "Točnost napovedi",
       x = "k")+
  scale_color_manual(values = c("blue", "green"))+
  theme(strip.text = element_text(size = 16, face = "bold"),
        axis.text = element_text(size = 14),
        axis.title = element_text(size = 14),
        legend.text = element_text(size = 14))



```

- manjša kot je redkost dogodka boljši je spec/sens razen pri shrinkage 1
- več kot je vplivnih spremenljivk, boljši je spec/sens
- shrinkage 0.1 je boljši od 0.01, shrinkage 1 je čuden, spec/sens pada
- razlika mu_d ne vpliva na spec/sens



```{r ločeno po shrinkage - DS-St}

ggplot(data = res_means_acc[which(res_means_acc$shrink == 0.01), ], aes(y = acc, x = k))+
  facet_grid(mu_d~d, labeller = label_both)+
  geom_point(aes(y = sens))+
  geom_line(aes(y = sens), color = "blue")+
  geom_point(aes(y = spec))+
  geom_line(aes(y = spec), color = "green")


ggplot(data = res_means_acc[which(res_means_acc$shrink == 0.1), ], aes(y = acc, x = k))+
  facet_grid(mu_d~d, labeller = label_both)+
  geom_point(aes(y = sens))+
  geom_line(aes(y = sens), color = "blue")+
  geom_point(aes(y = spec))+
  geom_line(aes(y = spec), color = "green")

ggplot(data = res_means_acc[which(res_means_acc$shrink == 1), ], aes(y = acc, x = k))+
  facet_grid(mu_d~d, labeller = label_both)+
  geom_point(aes(y = sens))+
  geom_line(aes(y = sens), color = "blue")+
  geom_point(aes(y = spec))+
  geom_line(aes(y = spec), color = "green")

```

```{r vse skupaj - St Ensemble}
#spec&sens pri različnih k, d, mu_d in shrink za Stohastic Ensemble
ggplot(data = res_means_acc.ens, aes(y = acc, x = k))+
  facet_grid(mu_d~d+shrink, labeller = label_both)+
  geom_point(aes(y = sens))+
  geom_line(aes(y = sens, color = "PAmin"))+
  geom_point(aes(y = spec))+
  geom_line(aes(y = spec, color = "PAmaj"))+
  theme_light()+
  labs(color = "",
       y = "Točnost napovedi",
       x = "k")+
  scale_color_manual(values = c("blue", "green"))+
  theme(strip.text = element_text(size = 16, face = "bold"),
        axis.text = element_text(size = 14),
        axis.title = element_text(size = 14),
        legend.text = element_text(size = 14))

```
- gap je večji kot pri prejšnjem, ampak še vedno ni ful velik - manj kot 0.1
- pri shrink 0.01 se križata PAmaj je pri manjšem k nižji od PAmin
- shrink 0.1 ima očitno boljšo napoved, pri shrink 1 je podobno kot v DS-St-GrBoost, pada
- več vplivnih spremenljivk je boljša napoved, ampak ne pri majhnem k
- razlika mu_d nima vpliva

```{r g-means primerjava}
#primerjava g-means obeh metod
ggplot(data = res_means_acc, aes(y = g_means, x = k))+
  facet_grid(mu_d~d+shrink, labeller = label_both)+
  geom_point(aes(y = g_means))+
  geom_line(aes(y = g_means, color = "DS-St-GrBoost"))+
  geom_point(data = res_means_acc.ens, aes(y = g_means))+
  geom_line(data = res_means_acc.ens, aes(y = g_means, color = "St-Ensemble"))+
  theme_light()+
  labs(color = "",
       y = "G-povprečje",
       x = "k")+
  scale_color_manual(values = c("red", "darkgreen"))+
  theme(strip.text = element_text(size = 20, face = "bold"),
        axis.text = element_text(size = 16),
        axis.title = element_text(size = 16),
        legend.text = element_text(size = 16))
```
- pri 0.01 in d 10&15 bolje napove DS-St-GrBoost, pri shrink 0.1 bolje Ensemble, razen pri majhnem k in velikem d, pri shrink 1 bolje DS-St-GrBoost
- ne moremo točno določiti katera metoda je boljša

```{r varimp DSSt}
#SHAP in relimp primerjava pri k, d in mu_d, pri shrinkage = 0.1 - DS-St-GrBoost
ggplot(data = res_means_varimp[which(res_means_varimp$shrink == 0.1),], aes(y = shap_delez_pravilno, x = k))+
  facet_grid(mu_d~d, labeller = label_both)+
  geom_point()+
  geom_line(aes(color = "SHAP"))+
  geom_point(aes(y = relimp_delez_pravilno))+
  geom_line(aes(y = relimp_delez_pravilno, color = "Rel.Imp"))+
  theme_light()+
  labs(color = "",
       y = "Delež pravilno identificiranih spremenljivk",
       x = "k")+
  scale_color_manual(values = c("darkblue", "orange"))+
  theme(strip.text = element_text(size = 20, face = "bold"),
        axis.text = element_text(size = 16),
        axis.title = element_text(size = 16),
        legend.text = element_text(size = 16))

```
- SHAP v povprečju pravilno identificira več 
- veliko bolje pri redkejših dogodkih??
- bolje, ko je več vplivnih spremenljivk
- mu_d nima pomembnega vpliva


```{r varimp Ensemble}
#SHAP in relimp primerjava pri k, d in mu_d, pri shrinkage = 0.1 - Ensemble
ggplot(data = res_means_varimp.ens[which(res_means_varimp$shrink == 0.1),], aes(y = shap_delez_pravilno, x = k))+
  facet_grid(mu_d~d, labeller = label_both)+
  geom_point()+
  geom_line(aes(color = "SHAP"))+
  geom_point(aes(y = relimp_delez_pravilno))+
  geom_line(aes(y = relimp_delez_pravilno, color = "Rel.Imp"))+
  theme_light()+
  labs(color = "",
       y = "Delež pravilno identificiranih spremenljivk",
       x = "k")+
  scale_color_manual(values = c("darkblue", "orange"))+
  theme(strip.text = element_text(size = 20, face = "bold"),
        axis.text = element_text(size = 16),
        axis.title = element_text(size = 16),
        legend.text = element_text(size = 16))

```

- enako kot DS-St-GrBoost

```{r varimp DSSt}
#SHAP in relimp primerjava pri k, d in mu_d, pri shrinkage = 0.1 - DS-St-GrBoost
ggplot(data = res_means_varimp[which(res_means_varimp$shrink == 0.1),], aes(y = shap_delez_pravilno, x = k))+
  facet_grid(mu_d~d, labeller = label_both)+
  geom_point()+
  geom_line(color = "red")+
  geom_point(data = res_means_varimp.ens[which(res_means_varimp$shrink == 0.1),], aes(y = shap_delez_pravilno))+
  geom_line(data = res_means_varimp.ens[which(res_means_varimp$shrink == 0.1),], aes(y = shap_delez_pravilno), color = "darkgreen")

```

- med metodama ni razlik


```{r kombinacije2}
p <- 500
n <- 50
k <- c(0.1, 0.25, 0.4)
d <- 30
mu_d <- 0.7

ntree <- 100
shrink <- 0.1
depth <- c(1, 5)

kombinacije2 <- expand.grid(p, n, k, d, mu_d, ntree, shrink, depth)
colnames(kombinacije2) <- c("p", "n", "k", "d", "mu_d", "ntree", "shrink", "depth")

```


```{r DS-St_GrBoost sim kombinacije 2}
res_master_acc2 <- data.frame(matrix(nrow = 0, ncol = 13))
res_master_var_imp2 <- data.frame(matrix(nrow = 0, ncol = 14))

colnames(res_master_acc2) <- c("n","p","prob1", "d",  "ntree","shrink",  "depth", "acc", "sens", "spec", "g_means","auc")

colnames(res_master_var_imp2) <- c("n",  "p",  "prob1",  "d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")

#use foreach- faster
nC <- detectCores()

registerDoParallel(cores=nC-1)

for (j in 1:nrow(kombinacije2)){
  komb_j <- kombinacije2[j, ]
####INITIAL VALUES
n <- komb_j$n 
p <- komb_j$p 
prob1 <- komb_j$k 
d <- komb_j$d 
mu_d <- komb_j$mu_d
vplivne_spr <- c(paste0("Var", 1:d)) 


ntree <- komb_j$ntree 
shrink <- komb_j$shrink
depth <- komb_j$depth 
subsample <- 0.5 

n.sim <- 100 
n.ens <- 10

sim_res <- foreach(sim = 1:n.sim, .packages = c("MASS", "gbm", "treeshap", "caret", "pROC"), .combine = rbind)%dopar%{
  
    mat_full <- sim_data(n = n, prob1 = prob1, p = p, d = d, mu_d = mu_d)

    ######## DS-St_GrBoost #########
    #downsized data
    n1 <- sum(mat_full[,1] == 1)

    DS_mat_full <- mat_full[c(which(mat_full[,1] == 1), sample(which(mat_full[,1] == 0), n1)), ]
    
    #CV jackknife DS-St-GrBoost
    res_jackknife <- data.frame(matrix(nrow = 0, ncol = 2))
    sim_res_var_imp <- data.frame(matrix(nrow = 0, ncol = 14))

        for (i in 1:nrow(DS_mat_full)){
      
            train_full <- DS_mat_full[-i, ]
            test_full <- DS_mat_full[i, ]

  
            mod <- gbm(Y ~ . , data = data.frame(train_full),
                  distribution = "bernoulli",
                  n.trees = ntree,
                  interaction.depth = depth,
                  shrinkage = shrink,
                  bag.fraction = subsample,
                  n.minobsinnode = 1)

            pred_prob <- predict(mod, data.frame(t(test_full)), type = "response")
            pred_class <- ifelse(pred_prob >= 0.5, 1, 0)

            res_jackknife[i, ] <- cbind(test_full[1], pred_class)

            #variable importance
            relimp_tmp <- relimp_topd(mod, d)
      
            ##SHAP
            shap_tmp <- shap_topd(mod, d, train_full)
      
            sim_res_var_imp <- rbind(sim_res_var_imp, c(n,
                                 p,
                                 prob1,
                                 d,
                                 mu_d,
                                 ntree,
                                 shrink,
                                 depth,
                                 shap_tmp,
                                 relimp_tmp))
            colnames(sim_res_var_imp) <- c("n",  "p",  "prob1",  "d", "mu_d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")
      }



    #točnost napovedi - DS-St_GrBoost
    conf_mat <- confusionMatrix(factor(res_jackknife$X2), factor(res_jackknife$X1), positive = "1")

    acc <- conf_mat$overall[1]
    sens <- conf_mat$byClass[1]
    spec <- conf_mat$byClass[2]
    g_means <- sqrt(sens*spec)
    auc <- auc(res_jackknife$X1, res_jackknife$X2)

    sim_res_acc <- c(n,
                    p,
                    prob1,
                    d,
                    mu_d,
                    ntree,
                    shrink,
                    depth,
                    acc,
                    sens,
                    spec,
                    g_means,
                    auc)
    

    list(sim_res_acc, sim_res_var_imp)
  }

sim_res_acc2 <- matrix(unlist(sim_res[, 1], use.names = FALSE), ncol = 13, byrow = TRUE)
sim_res_var_imp2 <- do.call(rbind, sim_res[,2])


colnames(sim_res_acc2) <- c("n","p","prob1", "d", "mu_d",  "ntree","shrink",  "depth", "acc", "sens", "spec", "g_means","auc")
colnames(sim_res_var_imp2) <- c("n",  "p",  "prob1",  "d", "mu_d",  "ntree",  "shrink",  "depth",   "shap_pravilno_izrazene", "shap_napacno_izrazene", "shap_delez_pravilno",  "relimp_pravilno_izrazene",  "relimp_napacno_izrazene", "relimp_delez_pravilno")

res_master_var_imp2 <- rbind(res_master_var_imp2, sim_res_var_imp2)
res_master_acc2 <- rbind(res_master_acc2, sim_res_acc2)

}


```


```{r rezultati 2 simulacij}
#rezultati 2 simulacij - DS St GrBoost varimp na depth 1 in 5
load("./sim2_rezultati.rdata")

```


```{r povprecja}
res_means_acc2 <- cbind(kombinacije2, matrix(NA, nrow = nrow(kombinacije2), ncol = 5))
colnames(res_means_acc2) <- c(colnames(kombinacije2), colnames(res_master_acc2[,9:13]))


res_means_varimp2 <- cbind(kombinacije2, matrix(NA, nrow = nrow(kombinacije2), ncol = 6))
colnames(res_means_varimp2) <- c(colnames(kombinacije2), colnames(res_master_var_imp2[,9:14]))


for (i in 1:nrow(kombinacije2)){
  komb_i <- kombinacije2[i, ]
  
  acc_res_i <- res_master_acc2[which(res_master_acc2$p == komb_i$p &
                                      res_master_acc2$n == komb_i$n &
                                      res_master_acc2$prob1 == komb_i$k &
                                      res_master_acc2$d == komb_i$d &
                                      res_master_acc2$ntree == komb_i$ntree &
                                      res_master_acc2$shrink == komb_i$shrink &
                                      res_master_acc2$depth == komb_i$depth), ]
  
  acc_means2 <- colMeans(acc_res_i[,9:13])
  
  res_means_acc2[i, ] <- cbind(komb_i, rbind(acc_means2))
  
  
  varimp_res_i <- res_master_var_imp2[which(res_master_var_imp2$p == komb_i$p &
                                      res_master_var_imp2$n == komb_i$n &
                                      res_master_var_imp2$prob1 == komb_i$k &
                                      res_master_var_imp2$d == komb_i$d &
                                      res_master_var_imp2$ntree == komb_i$ntree &
                                      res_master_var_imp2$shrink == komb_i$shrink &
                                      res_master_var_imp2$depth == komb_i$depth), ]
  
  varimp_means2 <- colMeans(varimp_res_i[,9:14])
  
  res_means_varimp2[i, ] <- cbind(komb_i, rbind(varimp_means2))
  
  
  }

```



```{r }
#SHAP in relimp primerjava pri k, d in mu_d, pri shrinkage = 0.1 - DS-St-GrBoost
ggplot(data = res_means_varimp2, aes(y = shap_delez_pravilno, x = k))+
  facet_grid(~depth, labeller = label_both)+
  geom_point()+
  geom_line(color = "orange")+
  geom_point(aes(y = relimp_delez_pravilno))+
  geom_line(aes(y = relimp_delez_pravilno), color = "darkblue")

```


```{r}
tmp <- res_means_varimp2[, c(3, 7, 8, 11, 14) ]
tmp$k <- factor(tmp$k)
tmp$depth <- factor(tmp$depth)
tmp$shrink <- factor(tmp$shrink)

tab <- tabular(k ~ Heading()*depth*(shap_delez_pravilno + relimp_delez_pravilno)*identity, data = tmp)

colLabels(tab)[3, ] <- "" #remove "identity" label
colLabels(tab)[1, 1] <- "DS-St-GrBoost(1)"
colLabels(tab)[1, 3] <- "DS-St-GrBoost(5)"
colLabels(tab)[2, 1] <- colLabels(tab)[2, 3] <- "SHAP"
colLabels(tab)[2, 2] <- colLabels(tab)[2, 4] <- "Rel. Imp"

toLatex(tab)
```



























