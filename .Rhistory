z
w
Call
gamlss.pb
view(gamlss.pb
)
Call
x<-data[["pb(z, df = 8)"]]
xeval = new.m[["pb(z, df = 8)"]]
regpen <- function(y, X, w, lambda, D) {
RD <- rbind(R, sqrt(lambda) * D)
svdRD <- svd(RD)
rank <- sum(svdRD$d > max(svdRD$d) * .Machine$double.eps^0.8)
U1 <- svdRD$u[1:p, 1:rank]
y1 <- t(U1) %*% Qy
beta <- svdRD$v[, 1:rank] %*% (y1/svdRD$d[1:rank])
HH <- (svdRD$u)[1:p, 1:rank] %*% t(svdRD$u[1:p, 1:rank])
df <- sum(diag(HH))
fit <- list(beta = beta, edf = df)
return(fit)
}
fnGAIC <- function(lambda, k) {
fit <- regpen(y = y, X = X, w = w, lambda = lambda, D)
fv <- X %*% fit$beta
GAIC <- sum(w * (y - fv)^2) + k * fit$edf
GAIC
}
fnGCV <- function(lambda, k) {
I.lambda.D <- (1 + lambda * UDU$values)
edf <- sum(1/I.lambda.D)
y_Hy2 <- y.y - 2 * sum((yy^2)/I.lambda.D) + sum((yy^2)/((I.lambda.D)^2))
GCV <- (n * y_Hy2)/(n - k * edf)^2
GCV
}
edf1_df <- function(loglambda) {
lambda <- exp(loglambda)
I.lambda.D <- (1 + lambda * UDU$values)
edf <- sum(1/I.lambda.D)
(edf - df)
}
edf2_df <- function(loglambda) {
lambda <- exp(loglambda)
I.lambda.D <- (1 + lambda * UDU$values)
edf <- sum(1/I.lambda.D)
(edf - max.df)
}
is.null(xeval)
position <- 0
rexpr <- regexpr("predict.gamlss", sys.calls())
for (i in 1:length(rexpr)) {
position <- i
if (rexpr[i] == 1)
break
}
position <- 0
rexpr <- regexpr("predict.gamlss", sys.calls())
rexpr
length(rexpr)
param
param="mu"
object
TT
smooth.labels
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun(xeval)
eval(Call)
getSmo
getSmo
function (object, what = c("mu", "sigma", "nu",
"tau"), parameter = NULL, which = 1)
{
if (!is.gamlss(object))
stop("this is design for gamlss objects only")
what <- if (!is.null(parameter)) {
match.arg(parameter, choices = c("mu", "sigma",
"nu", "tau"))
}
else match.arg(what)
if (!what %in% object$par)
stop(paste(what, "is not a parameter in the object",
"\n"))
AllSmo <- object[[paste(what, ".coefSmo", sep = "")]]
Smo <- if (which == 0)
AllSmo
else AllSmo[[which]]
Smo
}""""
AllSmo <- object[[paste(what, ".coefSmo", sep = "")]]
AllSmo
AllSmo[[1]]
Smo<-AllSmo[[1]]
Smo
fun(xeval)
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun(xeval)
Smo$coef
fit$mu.coefSmo[[1]]$coef
fit$mu.coefSmo[[1]]$coef-Smo$coef
xeval
names(getSmo())
names(getSmo)
pred <- getSmo(object, parameter = param, which = which(smooth.labels ==
TT))
names(pred)
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))
pred
pred2<-fit$mu.coefSmo[[1]]
pred2
names(pred2)
names(pred)
pred$fun
pred$fun(xeval)
xeval
x<-0.25
deriv=0L
deriv <- as.integer(deriv)
deriv < 0L || deriv > 3L
deriv > 0L
res <- .splinefun(x, z)
deriv > 0 && z$method == 2 && any(ind <- x <= z$x[1L])
res <- .splinefun(x, z)
z
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun(aids$z[1])
Bg[1,]%*%fit$mu.coefSmo[[1]]$coef
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun(0.25)
Bg[46,]%*%fit$mu.coefSmo[[1]]$coef
names(pred)
pred$fun
pred2$fun
names(pred)
z
pred$coef
pred2$coef
names(pred)
pred$fv
pred2$fv
pred2$fv
pred2$fv-pred$fv
names(pred)
pred$lambda
pred2$lambda
pred2$edf
pred$edf
pred2$sigb2
pred$sigb2
pred$sige2
pred2$sige2
pred2$sigb
pred$sigb
pred$sige
pred2$sige
pred$method
pred$fun(0.25)
pred2$fun(0.25)
pred$fun
deriv = 0L
deriv <- as.integer(deriv)
deriv < 0L || deriv > 3L
deriv > 0L
res <- .splinefun(x, z)
res
res <- splinefun(x, z)
pred2$fun(0.25)
Bg[]
Bg[46,]%*%fit$mu.coefSmo[[1]]$coef
pred2$fun(0.25)
pred2$fun(aids$z[1])
Bg[1,]%*%fit$mu.coefSmo[[1]]$coef
pred2$fun
getAnywhere(.splinefun)
getAnywhere(splinefun)
getAnywhere(.splinefun)
getAnywhere(C_SplineEval)
gt<-function (x, z)   .Call(C_SplineEval, x, z)
gt(x,z)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 1000))$lp$mu
)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 1000))$lp$mu
)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 1000)))$lp$mu
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 1000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 1000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 1000),pp)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 1000),pp2)
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 1000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 1000),pp2)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
splinefun()
splinefun
fit<-gamlss(y~qrt+pb(z,df=12),data=aids,family=PO)
m2<-gamlssReport(fit)
fit<-gamlss(y~qrt+pb(z,df=10),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=3),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=5),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=6),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=7),data=aids,family=PO)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=8),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=7),data=aids,family=PO)
m2<-gamlssReport(fit)
newdata<-data.frame(qrt=1,z=0.25)
predict(m2,newdata=data.frame(qrt="reference",z=0.25))$lp$mu
predict(fit,newdata=data.frame(qrt=1,z=0.25))
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=7),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=8),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=9),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=10),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=11),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
fit<-gamlss(y~qrt+pb(z,df=10),data=aids,family=PO)
m2<-gamlssReport(fit)
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
make_spline
bbase <- function(x, xl, xr, ndx, deg, quantiles=FALSE)
{
tpower <- function(x, t, p)
# Truncated p-th power function
(x - t) ^ p * (x > t)
# DS xl= min, xr=max, ndx= number of points within
# Construct B-spline basis
# if quantiles=TRUE use different bases
dx <- (xr - xl) / ndx # DS increment
if (quantiles) # if true use splineDesign
{  #  this is not working and should be taken out
knots <-  sort(c(seq(xl-deg*dx, xl, dx),quantile(x, prob=seq(0, 1, length=ndx)), seq(xr, xr+deg*dx, dx)))
B <- splineDesign(knots, x = x, outer.ok = TRUE, ord=deg+1)
n <- dim(B)[2]
attr(B, "knots") <- knots[-c(1:(deg-1), (n-(deg-2)):n)]
return(B)
}
else # if false use Paul's
{
knots <- seq(xl - deg * dx, xr + deg * dx, by = dx)
P <- outer(x, knots, tpower, deg)# calculate the power in the knots
n <- dim(P)[2]
D <- diff(diag(n), diff = deg + 1) / (gamma(deg + 1) * dx ^ deg) #
B <- (-1) ^ (deg + 1) * P %*% t(D)
attr(B, "knots") <- knots[-c(1:(deg-1), (n-(deg-2)):n)]
# I think what I need is xl, xr, ndx, deg
# quantiles should be eliminated
# why I do not save all knots?
B
}
}
make_spline<-function(newx,knots,degree,rng){ #this will only work if in pb they used uniformly set knots!
xr<-rng[2]
xl<-rng[1]
ndx<-length(knots)-degree #number of knots-degree!
xmax<-xr + 0.01 * (xr - xl)
xmin<-xl - 0.01 * (xr - xl)
dt<-(xmax - xmin) / ndx
knots2<-seq(xmin - degree * dt, xmax + degree * dt, by = dt)
B<-bbase( x = newx,xl=xl,xr=xr,ndx=ndx,deg=degree)
B
}
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp<-predict(m2,newdata=data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))$lp$mu
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2)
bbase( x = 0.05,xl=min(aids$z),xr=max(aids$z),ndx=10,deg=3)
bbase( x = 0.05,xl=min(aids$z),xr=max(aids$z),ndx=10,deg=3)%*%fit$mu.coefSmo[[1]]$coef
aids$z
summary(aids$z)
aids$z[order(aids$z)]
splinefun
pred$fun()
pred$fun
z
?splinefun
require(graphics)
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = 0.1+c(3,3,3,1))
n <- 9
x <- 1:n
y <- rnorm(n)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
x<-aids$mu.s
x
x<-fit$mu.s
plot(aids$z,x)
plot(aids$z,x,type="l")
plot(aids$z[order(aids$z)],x[order(aids$z)],type="l")
splinefun(aids$z[order(aids$z)],x[order(aids$z)])
ss<-splinefun(aids$z[order(aids$z)],x[order(aids$z)])
ss(0.25)
pred$fun(0.25)
ss<-spline(aids$z[order(aids$z)],x[order(aids$z)])
ss
plot(ss$x,ss$y,type="l")
pred
ss<-spline(aids$z[order(aids$z)],x[order(aids$z)],n=1e6)
fit$mu.coefficients
cbind(c(1,0,0,0),aids$z)
rbind(c(1,0,0,0),aids$z)
matrix(c(1,0,0,0),ncol=4,nrow=nrow(aids))
t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids)))
cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids))),aids$z)
predl<-cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids))),aids$z)%*%fit$mu.coefficients
predl
predl<-cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids))),ss$x)%*%fit$mu.coefficients
predl<-cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=length(ss$x))),ss$x)%*%fit$mu.coefficients
pred<-predl+ss$y
plot(ss$x,pred,type="l")
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,col="blue")
pred$fun
pred$fun
pred2$fun
z
plot(z[order(aids$z)],aids$z[order(aids$z)])
plot(aids$z[order(aids$z)],z[order(aids$z)])
plot(aids$z[order(aids$z)],z[order(aids$z)],type="l")
object
newdata
what
parameter
head(data)
data<-aids
data <- data[match(names(newdata),names(data))]
## merge the two data together
data <- concat(data,newdata)
data
parform <- formula(object, what)# object[[paste(what, "formula", sep=".")]]
parform[2] <- NULL
## define the terms
Terms <- terms(parform)
m <- model.frame(Terms, data, xlev = object[[paste(what,"xlevels",sep=".")]])
## model design matrix y and w
X <- model.matrix(Terms, data, contrasts = object$contrasts)
y <- object[[paste(what,"lp",sep=".")]]
w <- object[[paste(what,"wt",sep=".")]]
## leave for future checks
#  aN <- dim(newdata)[1]
#zeros <- rep(0,aN)
#ones <- rep(1,aN)
#yaug <- as.vector(c(y,zeros))
#waug <- as.vector(c(w,zeros))
## for keeping only the original data
onlydata <- data$source == "data" # TRUE or FALSE
## whether additive terms are involved in the fitting
smo.mat <- object[[paste(what,"s",sep=".")]]
refit <- lm.wfit(X[onlydata,  , drop = FALSE], y, w)
refit$coefficients
coef <- refit$coef         ## save the coefficints
nX <- dimnames(X)        ## the names of rows and columns
rownames <- nX[[1]][!onlydata] ## only the newdata rows
nrows <- sum(!onlydata)     ## the number of rows in the new data
nac <- is.na(coef)        ## whether they are NA in coefficients
assign.coef <- attr(X, "assign")  ## X is a matrix
collapse <- type != "terms"## !collapse is for whether type is not "terms"
Xpred <- X[!onlydata,]
Xpred <- matrix(Xpred, nrow=nrows) # I think this probably is not needed sinse allready a matrix
pred <- drop(Xpred[, !nac, drop = FALSE] %*% coef[!nac])
pred
smooth.labels <- dimnames(smo.mat)[[2]]       ## getting the labels i.e. "pb(Fl)" "pb(A)"
pred.s <- array(0, c(nrows, n.smooths), list(names(pred),
dimnames(smo.mat)[[2]])) ## creating the prediction matrix
# smooth.labels[smooth.labels%in%colnames(X)]
# smooth.wanted <- smooth.labels[match(smooth.labels, colnames(X), 0) > 0]
## getting the smoothing call
smooth.calls <- lapply(m[smooth.labels], attr, "call") # i.e $`pb(Fl)`
#     gamlss.pb(data[["pb(Fl)"]], z, w)
data <- subset(m, onlydata, drop=FALSE)        ## get the  original data
attr(data, "class") <- NULL                                   ## note that m is the data.frame with all data
new.m <- subset(m, !onlydata, drop=FALSE)       ## get the new data
attr(new.m, "class") <- NULL
residuals <-  if (!is.null(off.num)) object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]]+offsetVar[onlydata]
else object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]]
!is.null(off.num)
residuals=object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]]
object[[paste(what,"wv",sep=".")]]
object[[paste(what,"lp",sep=".")]]
aids$y
?gamlss
TT
object
attributes(data[[TT]]) <- attributes(m[[TT]])
Call <- smooth.calls[[TT]] #
Call$xeval <- substitute(new.m[[TT]], list(TT = TT))
z <- residuals + smo.mat[, TT]
z
plot(z)
plot(z[order(aids$z)])
eval(Call)
Call
w
x<-data[["pb(z, df = 8)"]]
xeval = new.m[["pb(z, df = 8)"]]
y<-z
is.null(xeval)
position <- 0
rexpr <- regexpr("predict.gamlss", sys.calls())
rexpr
1:length(rexpr)
position<-1
gamlss.environment <- sys.frame(position)
gamlss.environment <- sys.frame(0)
param
param <- get("what", envir = gamlss.environment)
object <- get("object", envir = gamlss.environment)
TT <- get("TT", envir = gamlss.environment)
smooth.labels <- get("smooth.labels", envir = gamlss.environment)
pred <- getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun(xeval)
pred
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun
z
ss<-spline(z)
ss
ss<-splinefun(z)
ss(0.25)
ss<-splinefun(z[order(aids$z)])
ss(0.25)
gr<-function (x, deriv = 0L)
{
deriv <- as.integer(deriv)
if (deriv < 0L || deriv > 3L)
stop("'deriv' must be between 0 and 3")
if (deriv > 0L) {
z0 <- double(z$n)
z[c("y", "b", "c")] <- switch(deriv,
list(y = z$b, b = 2 * z$c, c = 3 * z$d), list(y = 2 *
z$c, b = 6 * z$d, c = z0), list(y = 6 * z$d,
b = z0, c = z0))
z[["d"]] <- z0
}
res <- .splinefun(x, z)
if (deriv > 0 && z$method == 2 && any(ind <- x <= z$x[1L]))
res[ind] <- ifelse(deriv == 1, z$y[1L], 0)
res
}
gr(0.25)
pred2$fun()
pred2$fun
pred2$fun(0.25)
spline
splinefun()
splinefun
Bg
Bg[46,]%*%fit$mu.coefSmo[[1]]$coef
pred2$fun(0.25)
