if (no==5){
grid<-seq(from=min.grid,to=max.grid,by=step.grid)
zz<-0
fiti<-list()
tau1i<-tau2i<-tau3i<-tau4i<-tau5i<-list()
for (i in 1:(length(grid)-4)){
for (j in (i+1):(length(grid)-3)){
for (k in (j+1):(length(grid)-2)){
for (l in (k+1):(length(grid)-1)){
for (m in (l+1):(length(grid))){
zz=zz+1
tau1<-grid[i]
tau2<-grid[j]
tau3<-grid[k]
tau4<-grid[l]
tau5<-grid[m]
tau1i[[zz]]<-tau1
tau2i[[zz]]<-tau2
tau3i[[zz]]<-tau3
tau4i[[zz]]<-tau4
tau5i[[zz]]<-tau5
data$U1<-ifelse(data$X-tau1<0,0, data$X-tau1)
data$U2<-ifelse(data$X-tau2<0,0, data$X-tau2)
data$U3<-ifelse(data$X-tau3<0,0, data$X-tau3)
data$U4<-ifelse(data$X-tau4<0,0, data$X-tau4)
data$U5<-ifelse(data$X-tau5<0,0, data$X-tau5)
fiti[[zz]]<-try(update(fit,formula = Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X+U1+U2+U3+U4+U5,data=data,evaluate=TRUE),silent=TRUE)
} }
}}}
tau1i[[zz+1]]<-0
tau2i[[zz+1]]<-0
tau3i[[zz+1]]<-0
tau4i[[zz+1]]<-0
tau5i[[zz+1]]<-0
fiti[[zz+1]]<-fit
mm<-which.max(unlist(lapply(fiti,my.lrt)))
if (mm==zz+1) est.tau<-NA else {
est.tau1<-tau1i[[mm]]
est.tau2<-tau2i[[mm]]
est.tau3<-tau3i[[mm]]
est.tau4<-tau4i[[mm]]
est.tau5<-tau5i[[mm]]
est.tau<-c(est.tau1,est.tau2,est.tau3,est.tau4,est.tau5)
}
fito<-fiti[[mm]]
#CI
if (sum(!is.na(est.tau))>0){
lmt<-my.ci.limits(fito,fiti,no)
lmt1<-get_limit(tau1i,lmt)
lmt2<-get_limit(tau2i,lmt)
lmt3<-get_limit(tau3i,lmt)
lmt4<-get_limit(tau4i,lmt)
lmt5<-get_limit(tau5i,lmt)
ci.tau.1<-c(min(lmt1,na.rm=TRUE),max(lmt1,na.rm=TRUE))
ci.tau.2<-c(min(lmt2,na.rm=TRUE),max(lmt2,na.rm=TRUE))
ci.tau.3<-c(min(lmt3,na.rm=TRUE),max(lmt3,na.rm=TRUE))
ci.tau.4<-c(min(lmt4,na.rm=TRUE),max(lmt4,na.rm=TRUE))
ci.tau.5<-c(min(lmt5,na.rm=TRUE),max(lmt5,na.rm=TRUE))
ci.tau<-list(ci.tau.1,ci.tau.2,ci.tau.3,ci.tau.4,ci.tau.5)
} else ci.tau<-NA
}
list(est.tau=est.tau,fit=fito,ci.tau=ci.tau)
}
est.coef.grid<-function(fit){
cfs<-rep(NA,12)
cfsi<-coef(fit$fit)
cfs[1:length(cfsi)]<-cfsi
cfs
}
est.location.grid<-function(fit){
cfs<-rep(NA,5)
cfsi<-fit$est.tau
cfs[1:length(cfsi)]<-cfsi
cfs
}
getci.grid<-function(fit){
mat<-matrix(NA,ncol=2,nrow=5)
for (i in 1:length(fit$ci.tau)){
mat[i,]<-fit$ci.tau[[i]]
}
mat
}
delta0=0.1
delta1=0.5
task="medium"
no=2
alter=FALSE
n=100
model="linear"
var.sigma=2
phi.beta=20
intercept=1
mean_y=50
if (model=="linear"|model=="quantile") int=intercept else {
if (model=="poisson"){
int<-get_intercept_poisson(mean_y,delta0,delta1,get.tau(task=task,no=no),alter=alter)
} else {
int<-get_intercept_logistic(mean_y,delta0,delta1,get.tau(task=task,no=no),alter=alter)
}
}
mydata<-mysim_data(n=n,dif=task,no=no, delta0=delta0,delta1=delta1,alter=alter,model=model,intercept=int,var.sigma=var.sigma,phi.beta = phi.beta)
# hist(mydata$data$Y)
#boxplot(mydata$data$Y~mydata$data$X)
mnY<-mean(mydata$data$Y)
sdY<-sd(mydata$data$Y)
if (model=="linear") fit<-try(lm(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data),silent=TRUE)
if (model=="logistic") fit<-try(glm(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,family = binomial(link="logit"),method="brglmFit",type="AS_mean"),silent=TRUE)
if (model=="poisson") fit<-try(glm(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,family = poisson(link="log"),method="brglmFit",type="AS_mean"),silent=TRUE)
if (model=="beta") fit<-try(betareg(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,type="BR",link="logit") ,silent=TRUE)
if (model=="quantile") fit <- try(rq(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,tau= 0.5 ),silent=TRUE)
segmented.default(fit,seg.Z=~X,npsi=no,control=seg.control(n.boot=50,alpha=0.01))
segmented.default.rok(fit,seg.Z=~X,npsi=no,lambda=10,control=seg.control(n.boot=50,alpha=0.01))
fun<-function(x) x**2
inverse(fun)
inverse = function (f, lower = -inf, upper = infert) {
function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)[1]
}
inverse(fun)
inv_fun<-inverse(fun)
inv_fun(16)
inv_fun<-inverse(fun,-Inf,Inf)
inv_fun(16)
inv_fun<-inverse(fun,-100000,100000)
inv_fun(16)
inv_fun(4)
inverse = function (f, lower = -inf, upper = inf) {
function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)[1]
}
inv_fun<-inverse(fun)
inv_fun(4)
inv_fun<-inverse(fun,-10,10)
inv_fun(4)
fun
install.packages(c("caret", "doParallel", "dplyr", "gbm", "ggplot2", "kernelshap", "knitr", "pROC", "reshape2", "rsample", "shapviz", "tables", "treeshap"))
library(roxygene)
install.packages("roxygen2")
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(gamlssReport)
?gamlssReport
roxygen2::roxygenise()
library(gamlssReport)
library(gamlssReport)
roxygen2::roxygenise()
library(gamlssReport)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(gamlssReport)
load("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\resultsTestBHSex0DistrBCGG.Rdata")
ls()
dd<-gamlssReport(mod1)
dd
names(dd)
dd$family
dd$coef.beta
predict.gamlssReport(dd, newdata=data.frame(nage=sqrt(10)), gamlss.prediction = FALSE)
?gamlssReport
object=dd
newdata=data.frame(nage=sqrt(10))
gamlss.prediction=FALSE
splinevar<-object$terms$splinevar
splinevar
dd
mod1
fixformula<-lapply(object$terms$fixformula,as.formula)
fixformula
object$terms$fixformula
object<-mod1
extract.smooth=FALSE
.family<-object$family
params<-object$parameters
.terms<-extract_terms(object)
.link<-coef.beta<-coef.spline<-knots.spline<-range.x<-degree.spline<-vector("list",length=length(params))
names(.link)<-names(coef.beta)<-names(coef.spline)<-names(knots.spline)<-names(range.x)<-names(degree.spline)<-params
.terms
object
params<-object$parameters
splinevar<-fixformula<-vector("list",length=length(params))
names(splinevar)<-names(fixformula)<-params
params
ii="mu"
nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1] #ignore the outcome var
nms
attributes(object[[paste(ii,".terms",sep="")]])$dataClasses)
object[[paste(ii,".terms",sep="")]])$dataClasses
object[[paste(ii,".terms",sep="")]]
attributes(object[[paste(ii,".terms",sep="")]])$dataClasses
ls()
head(ddma)
nms
object[[paste(ii,".terms",sep="")]]
attributes(object[[paste(ii,".terms",sep="")]])$dataClasses
attributes(object[[paste(ii,".terms",sep="")]])$predvars
attributes(object[[paste(ii,".terms",sep="")]])$variables
nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1]
nms
object[[paste(ii,".terms",sep="")]]
attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$term.labels))[-1] #ignore the outcome var
nms
attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1] #ignore the outcome var
nms
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels)
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms
extract_terms<-function(object){
params<-object$parameters
splinevar<-fixformula<-vector("list",length=length(params))
names(splinevar)<-names(fixformula)<-params
for (ii in params){
#this worked for slofit, but it does not for fitback (it adds (weights)!)
nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1] #ignore the outcome var
#is this a good fix?
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
if (length(nms)==0){
fixformula[[ii]]<-as.formula(~1)
} else {
att<-attributes(object[[paste(ii,".terms",sep="")]])
logicf<-att$dataClasses[-1]=="factor"
if (sum(logicf)>0){
for (jj in which(logicf==TRUE)){
nmsj<-nms[jj]
x<-colnames(object[[paste(ii,".x",sep="")]])
rf<-"\"reference\""
lvl<-c(rf,unlist(lapply(strsplit(x[grepl(nmsj,x)],nmsj),function(x) x[2]))  )
levelsj<-paste("c(",paste(lvl,collapse=",") ,")",sep="")
newnamej<-paste("factor(",nmsj,",levels=",levelsj,")",sep="")
nms[jj]<-newnamej
}
}
logic<-grepl("pb",nms)
if (sum(logic)!=0) {
pbvar<-rep(NA,sum(logic))
vars<-nms
zz=0
for (jj in which(logic==TRUE)){
zz=zz+1
spl<-strsplit(nms[jj],"pb\\(")[[1]][2]
if (length(strsplit(spl,",")[[1]])==1) pbvar[zz]<-strsplit(spl,")")[[1]] else  pbvar[zz]<-strsplit( spl  ,",")[[1]][1]
if (zz==sum(logic)) splinevar[[ii]]<-pbvar
vars[jj]<-pbvar[zz]
}
#fixf<-as.formula(paste("~",paste(vars,collapse="+"),sep=""))
fixf<-paste("~",paste(vars,collapse="+"),sep="")
} else {
#fixf<-as.formula(paste("~",paste(nms,collapse="+"),sep=""))
fixf<-paste("~",paste(nms,collapse="+"),sep="")
}
#fixformula[[ii]]<-format(fixf) #it works if we change predict function also
fixformula[[ii]]<-fixf
}
}
list(fixformula=fixformula,splinevar=splinevar)
}
dd<-gamlssReport(mod1)
names(dd$terms)
dd$terms$fixformula
extract_ter,
extract_terms
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms
att<-attributes(object[[paste(ii,".terms",sep="")]])
att
logicf<-att$dataClasses[-1]=="factor"
logicf
att$dataClasses
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms0<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1]
nms
nms0
which(nms0%in%nms)
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms0<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1]
id.var<-which(nms0%in%nms)
id.var
att<-attributes(object[[paste(ii,".terms",sep="")]])[id.var]
stt
stt
att
attributes(object[[paste(ii,".terms",sep="")]])
att<-attributes(object[[paste(ii,".terms",sep="")]])
att$dataClasses
att$dataClasses[-1][id.var]
logicf<-att$dataClasses[-1][id.var]=="factor"
logicf
sum(logicf)>0
extract_terms<-function(object){
params<-object$parameters
splinevar<-fixformula<-vector("list",length=length(params))
names(splinevar)<-names(fixformula)<-params
for (ii in params){
#this worked for slofit, but it does not for fitback (it adds (weights)!)
#nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1] #ignore the outcome var
#is this a good fix?
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms0<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1]
id.var<-which(nms0%in%nms)
if (length(nms)==0){
fixformula[[ii]]<-as.formula(~1)
} else {
att<-attributes(object[[paste(ii,".terms",sep="")]])
logicf<-att$dataClasses[-1][id.var]=="factor"
if (sum(logicf)>0){
for (jj in which(logicf==TRUE)){
nmsj<-nms[jj]
x<-colnames(object[[paste(ii,".x",sep="")]])
rf<-"\"reference\""
lvl<-c(rf,unlist(lapply(strsplit(x[grepl(nmsj,x)],nmsj),function(x) x[2]))  )
levelsj<-paste("c(",paste(lvl,collapse=",") ,")",sep="")
newnamej<-paste("factor(",nmsj,",levels=",levelsj,")",sep="")
nms[jj]<-newnamej
}
}
logic<-grepl("pb",nms)
if (sum(logic)!=0) {
pbvar<-rep(NA,sum(logic))
vars<-nms
zz=0
for (jj in which(logic==TRUE)){
zz=zz+1
spl<-strsplit(nms[jj],"pb\\(")[[1]][2]
if (length(strsplit(spl,",")[[1]])==1) pbvar[zz]<-strsplit(spl,")")[[1]] else  pbvar[zz]<-strsplit( spl  ,",")[[1]][1]
if (zz==sum(logic)) splinevar[[ii]]<-pbvar
vars[jj]<-pbvar[zz]
}
#fixf<-as.formula(paste("~",paste(vars,collapse="+"),sep=""))
fixf<-paste("~",paste(vars,collapse="+"),sep="")
} else {
#fixf<-as.formula(paste("~",paste(nms,collapse="+"),sep=""))
fixf<-paste("~",paste(nms,collapse="+"),sep="")
}
#fixformula[[ii]]<-format(fixf) #it works if we change predict function also
fixformula[[ii]]<-fixf
}
}
list(fixformula=fixformula,splinevar=splinevar)
}
dd<-gamlssReport(mod1)
names(dd)
dd$terms
extract_terms
params<-object$parameters
splinevar<-fixformula<-vector("list",length=length(params))
names(splinevar)<-names(fixformula)<-params
ii
nms<-attributes(object[[paste(ii,".terms",sep="")]])$term.labels
nms0<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1]
id.var<-which(nms0%in%nms)
nms
nms0
id.var
att<-attributes(object[[paste(ii,".terms",sep="")]])
logicf<-att$dataClasses[-1][id.var]=="factor"
logicf
object[[paste(ii,".x",sep="")]]
colnames(object[[paste(ii,".x",sep="")]])
logic<-grepl("pb",nms)
logic
sum(logic)!=0
pbvar<-rep(NA,sum(logic))
vars<-nms
pbvar
vars
which(logic==TRUE)
jj=1
zz=1
spl<-strsplit(nms[jj],"pb\\(")[[1]][2]
spl
if (length(strsplit(spl,",")[[1]])==1) pbvar[zz]<-strsplit(spl,")")[[1]] else  pbvar[zz]<-strsplit( spl  ,",")[[1]][1]
if (zz==sum(logic)) splinevar[[ii]]<-pbvar
vars[jj]<-pbvar[zz]
pbvar
vars
pbvar<-rep(NA,sum(logic))
vars<-nms
zz=0
for (jj in which(logic==TRUE)){
zz=zz+1
spl<-strsplit(nms[jj],"pb\\(")[[1]][2]
if (length(strsplit(spl,",")[[1]])==1) pbvar[zz]<-strsplit(spl,")")[[1]] else  pbvar[zz]<-strsplit( spl  ,",")[[1]][1]
if (zz==sum(logic)) splinevar[[ii]]<-pbvar
vars[jj]<-pbvar[zz]
}
pbvar
vars
fixf<-paste("~",paste(vars,collapse="+"),sep="")
fixf
library(gamlssReport)
dd<-gamlssReport(mod1)
dd$terms
predict.gamlssReport(dd, newdata=data.frame(nage=sqrt(10)), gamlss.prediction = FALSE)
plot(
dd,
"nage",
range.x=dd$range.x$mu$nage,
gamlss.prediction = FALSE,
x.transform = function(x) x^2,
centiles = c(10, 50, 90),
newdata = NULL,
return.object = FALSE,
seq.length = 1e+05
)
library(gamlss)
plot(
dd,
"nage",
range.x=dd$range.x$mu$nage,
gamlss.prediction = FALSE,
x.transform = function(x) x^2,
centiles = c(10, 50, 90),
newdata = NULL,
return.object = FALSE,
seq.length = 1e+05
)
list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results")
ii<-nms[1]
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\",ii))
paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\",ii)
ii
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results")
ii=nms[1]
ii
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\",ii))
ls()
mod1
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\",ii))
mod_gamlssReport<-gamlssReport(mod1)
save(mod_gamlssReport,file=paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFiles",ii))
?save
mod_gamlssReport
paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFiles",ii)
save(mod_gamlssReport,file=paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFiles\\",ii))
plot(
mod_gamlssReport,
"nage",
range.x=mod_gamlssReport$range.x$mu$nage,
gamlss.prediction = FALSE,
x.transform = function(x) x^2,
centiles = c(10, 50, 90),
newdata = NULL,
return.object = FALSE,
seq.length = 1e+05
)
plot(
mod_gamlssReport,
"nage",
range.x=mod_gamlssReport$range.x$mu$nage,
gamlss.prediction = FALSE,
x.transform = function(x) x^2,
centiles = c(10, 50, 90),
newdata = NULL,
return.object = FALSE,
seq.length = 1e+05
)
plot(
mod_gamlssReport,
"nage",
range.x=mod_gamlssReport$range.x$mu$nage,
gamlss.prediction = FALSE,
x.transform = function(x) x^2,
centiles = c(10, 50, 90),
newdata = NULL,
return.object = FALSE,
seq.length = 1e+05
)
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results")
for (ii in nms){
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\",ii))
mod_gamlssReport<-gamlssReport(mod1)
save(mod_gamlssReport,file=paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFiles\\",ii))
}
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results")
nms
ii
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results")[-1]
for (ii in nms){
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\",ii))
mod_gamlssReport<-gamlssReport(mod1)
save(mod_gamlssReport,file=paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFiles\\",ii))
}
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results")[-1]
nms
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results")[-1]
for (ii in nms){
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results\\",ii))
mod_gamlssReport<-gamlssReport(mod1)
save(mod_gamlssReport,file=paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFilesDifPower\\",ii))
}
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results")[-1]
nms0
list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results")
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results")[-1]
nms
ii
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results\\",ii))
mod_gamlssReport<-gamlssReport(mod1)
paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysis\\results\\gamlssReportFilesDifPower\\",ii)
nms<-list.files("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results")[-1]
for (ii in nms){
load(paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results\\",ii))
mod_gamlssReport<-gamlssReport(mod1)
save(mod_gamlssReport,file=paste0("E:\\CentileCurvesEuroNorms\\FinalAnalysisDifPower\\results\\gamlssReportFilesDifPower\\",ii))
}
sessionInfo()
?gamlssReport
library(gamlssReport)
?gamlssReport
