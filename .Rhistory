params<-object$parameters
splinevar<-fixformula<-vector("list",length=length(params))
names(splinevar)<-names(fixformula)<-params
for (ii in params){
nms<-names(unlist(attributes(object[[paste(ii,".terms",sep="")]])$dataClasses))[-1] #ignore the outcome var
if (length(nms)==0){
fixformula[[ii]]<-as.formula(~1)
} else {
att<-attributes(object[[paste(ii,".terms",sep="")]])
logicf<-att$dataClasses[-1]=="factor"
if (sum(logicf)>0){
for (jj in which(logicf==TRUE)){
nmsj<-nms[jj]
x<-colnames(object[[paste(ii,".x",sep="")]])
rf<-"\"reference\""
lvl<-c(rf,unlist(lapply(strsplit(x[grepl(nmsj,x)],nmsj),function(x) x[2]))  )
levelsj<-paste("c(",paste(lvl,collapse=",") ,")",sep="")
newnamej<-paste("factor(",nmsj,",levels=",levelsj,")",sep="")
nms[jj]<-newnamej
}
}
logic<-grepl("pb",nms)
if (sum(logic)!=0) {
pbvar<-rep(NA,sum(logic))
vars<-nms
zz=0
for (jj in which(logic==TRUE)){
zz=zz+1
spl<-strsplit(nms[jj],"pb\\(")[[1]][2]
if (length(strsplit(spl,",")[[1]])==1) pbvar[zz]<-strsplit(spl,")")[[1]] else  pbvar[zz]<-strsplit( spl  ,",")[[1]][1]
if (zz==sum(logic)) splinevar[[ii]]<-pbvar
vars[jj]<-pbvar[zz]
}
#fixf<-as.formula(paste("~",paste(vars,collapse="+"),sep=""))
fixf<-paste("~",paste(vars,collapse="+"),sep="")
} else {
#fixf<-as.formula(paste("~",paste(nms,collapse="+"),sep=""))
fixf<-paste("~",paste(nms,collapse="+"),sep="")
}
#fixformula[[ii]]<-format(fixf) #it works if we change predict function also
fixformula[[ii]]<-fixf
}
}
list(fixformula=fixformula,splinevar=splinevar)
}
#' @title Aux function to recreate the B-spline basis
#' @description aux function used by \code{\link{predict.gamlssReport}}; not intendent to be used by the user.
#'
#'
#' @param newx vector containing values of x for which the B-spline bases are to be calculated.
#' @param knots the vector of knots; currently only the \code{length(knots)} matters (ie we assumed that knots in call to \code{gamlss} were uniformly set)
#' @param degree the degree of the spline used in \code{pb()}.
#' @param rng vector with 2 elements, min(x) and max(x)
#'
#' @seealso \code{\link{predict.gamlssReport}}
#' @author Rok Blagus, \email{rok.blagus@@mf.uni-lj.si}
#' @export
#' @examples
#'
#'
#' make_spline(10,seq(from=10,to=20,by=1),3,c(9,21))
make_spline<-function(newx,knots,degree,rng){ #this will only work if in pb they used uniformly set knots!
##taken from pb gamlss
bbase <- function(x, xl, xr, ndx, deg) #note we dont allow quantile=TRUE option!
{
tpower <- function(x, t, p)
# Truncated p-th power function
(x - t) ^ p * (x > t)
# DS xl= min, xr=max, ndx= number of points within
# Construct B-spline basis
# if quantiles=TRUE use different bases
dx <- (xr - xl) / ndx # DS increment
knots <- seq(xl - deg * dx, xr + deg * dx, by = dx)
P <- outer(x, knots, tpower, deg)# calculate the power in the knots
n <- dim(P)[2]
D <- diff(diag(n), diff = deg + 1) / (gamma(deg + 1) * dx ^ deg) #
B <- (-1) ^ (deg + 1) * P %*% t(D)
attr(B, "knots") <- knots[-c(1:(deg-1), (n-(deg-2)):n)]
B
}
##main f starts here
xr<-rng[2]
xl<-rng[1]
ndx<-length(knots)-degree #number of knots-degree!
xmax<-xr + 0.01 * (xr - xl)
xmin<-xl - 0.01 * (xr - xl)
#dt<-(xmax - xmin) / ndx #use if splineDesign
#knots2<-seq(xmin - degree * dt, xmax + degree * dt, by = dt)
#B<-splineDesign(knots = knots2, x = newx, ord = degree + 1, derivs = 0,outer.ok = TRUE)
B<-bbase(x=newx, xl=xmin, xr=xmax, ndx, deg=degree)
B
}
#' @title Inverse of the link function
#'
#' @param f the name of the link function (a character).
#' @param x the values at which to evaluate the inverse of the link function.
#'
#' @seealso \code{\link{predict.gamlssReport}}
#' @author Rok Blagus, \email{rok.blagus@@mf.uni-lj.si}
#' @export
#' @examples
#' make_inverse("log",1)
make_inverse<-function(f,x){ #add other options!
if (f=="log") y<-exp(x)
if (f=="exp") y<-log(x) #check to see if the names are ok!
if (f=="logit") y<-1/(1+exp(-x))
if (f=="inverse") y<-1/x
if (f=="identity") y<-x
y
}
library(gamlss)
data(aids)
aids1<-gamlss(y~pb(x,df=4)+qrt,data=aids,family=PO)
m.aids1<-gamlssReport(aids1)
new_data<-data.frame(x=c(10,15,2,4),qrt=c("reference",3,4,2) )
predict.gamlssReport(m.aids1,newdata=new_data   )
gamlss:predict(aids1,newdata=data.frame(x=c(10,15,2,4),qrt=c(1,3,4,2) ),what="mu",type="link")
aids1
summary(aids)
gamlss:predictAll(aids1,newdata=data.frame(x=c(10,15,2,4),qrt=c(1,3,4,2) ),type="link")
gamlss:predictAll(aids1,newdata=data.frame(x=c(1.5),qrt=c(1) ),type="link")
aids1
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10)+qrt+pb(x,df=5),data=aids,family=PO)
m.aids1<-gamlssReport(aids1)
newm<-data.frame(qrt="3",z=0.25,x=2)
mp<-predict(m,newm)$lp$mu
m<-gamlssReport(aids1)
mp<-predict(m,newm)$lp$mu
mp
predict(m,newm)$lp$mu
gamlss::predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link")
gamlss:predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link"
)
predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link")
m2<-gamlssReport(aids1,extract.smooth=TRUE)
names(m2)
predict(m2,newm,gamlss.prediction=TRUE)$lp$mu
roxygen2::roxygenise()
roxygen2::roxygenise()
?gamlssReport
?plot.gamlssReport
roxygen2::roxygenise()
library(gamlssReport)
library(gamlssReport)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(aids$z,aids$y,pch=16)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch=4)
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,4),col=c("black","red","black"),bty="n")
?predict.gamlssReport
library(gamlssReport)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit,extract.smooth = TRUE)
newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm,gamlss.prediction =TRUE)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(aids$z,aids$y,pch=16)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2,gamlss.prediction =TRUE)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch=4)
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,4),col=c("black","red","black"),bty="n")
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
#load("ATT04218.Rdata")
ninit<-nrow(dd)
dim(dd)
head(dd)
dd$x<-dd$SDM
nmis<-sum(is.na(dd$x))
#dd<-dd[!is.na(dd$x),]
#dd<-dd[!(is.na(dd$age)|is.na(dd$bmi)|is.na(dd$T600)|is.na(dd$SDM)|is.na(dd$spol)),]
dd<-dd[,c("x", "AKG", "DPR", "PON",  "DT", "PRE", "VZG", "T60",  "ATV", "age", "spol")]
dd<-na.omit(dd)
dd$spol<-ifelse(dd$spol=="mo?\241ki",0,1)
#lmx<-lm( x~  SDM+ T600+T60+age+ATT+spol,data= dd     )
lmx<-lm( x~ AKG  +DPR  +PON    +DT +PRE  +VZG  +T60  +age  +spol+ATV,data=dd ,x=T,y=T )
rstd<-rstudent(lmx)
n<-nrow(dd)
l.cl<-1:floor(n*0.001)
u.cl<-floor(n*(1-0.001)):n
dd<-dd[order(rstd),]
dd<-dd[-c(l.cl,u.cl),]
lmx<-update(lmx,data=dd)
#lmx<-lm( x~ age+bmi+T60+spol+SDM,data=dd  )
rstd1<-rstudent(lmx)
ddc<-dd
ddm<-ddc[ddc$spol==0,]
#ddm<-ddc[ddc$spol=="?enski",]
dds<-ddm[,c("age","x")]
#dds<-dds[sample(1:nrow(dds),500),] #used for testing
#dds<-dds #if all
ddma<-dds
setwd("C:/Users/rblagus/MF Uni LJ Dropbox/Rok Blagus/reportingGAMLSS_paper/code")
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
#load("ATT04218.Rdata")
ninit<-nrow(dd)
dim(dd)
head(dd)
dd$x<-dd$SDM
nmis<-sum(is.na(dd$x))
#dd<-dd[!is.na(dd$x),]
#dd<-dd[!(is.na(dd$age)|is.na(dd$bmi)|is.na(dd$T600)|is.na(dd$SDM)|is.na(dd$spol)),]
dd<-dd[,c("x", "AKG", "DPR", "PON",  "DT", "PRE", "VZG", "T60",  "ATV", "age", "spol")]
dd<-na.omit(dd)
dd$spol<-ifelse(dd$spol=="mo?\241ki",0,1)
#lmx<-lm( x~  SDM+ T600+T60+age+ATT+spol,data= dd     )
lmx<-lm( x~ AKG  +DPR  +PON    +DT +PRE  +VZG  +T60  +age  +spol+ATV,data=dd ,x=T,y=T )
rstd<-rstudent(lmx)
n<-nrow(dd)
l.cl<-1:floor(n*0.001)
u.cl<-floor(n*(1-0.001)):n
dd<-dd[order(rstd),]
dd<-dd[-c(l.cl,u.cl),]
lmx<-update(lmx,data=dd)
#lmx<-lm( x~ age+bmi+T60+spol+SDM,data=dd  )
rstd1<-rstudent(lmx)
ddc<-dd
ddm<-ddc[ddc$spol==0,]
#ddm<-ddc[ddc$spol=="?enski",]
dds<-ddm[,c("age","x")]
#dds<-dds[sample(1:nrow(dds),500),] #used for testing
#dds<-dds #if all
ddma<-dds
setwd("E:/CentileCurvesFSP")
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
#load("ATT04218.Rdata")
ninit<-nrow(dd)
dim(dd)
head(dd)
dd$x<-dd$SDM
nmis<-sum(is.na(dd$x))
#dd<-dd[!is.na(dd$x),]
#dd<-dd[!(is.na(dd$age)|is.na(dd$bmi)|is.na(dd$T600)|is.na(dd$SDM)|is.na(dd$spol)),]
dd<-dd[,c("x", "AKG", "DPR", "PON",  "DT", "PRE", "VZG", "T60",  "ATV", "age", "spol")]
dd<-na.omit(dd)
dd$spol<-ifelse(dd$spol=="mo?\241ki",0,1)
#lmx<-lm( x~  SDM+ T600+T60+age+ATT+spol,data= dd     )
lmx<-lm( x~ AKG  +DPR  +PON    +DT +PRE  +VZG  +T60  +age  +spol+ATV,data=dd ,x=T,y=T )
rstd<-rstudent(lmx)
n<-nrow(dd)
l.cl<-1:floor(n*0.001)
u.cl<-floor(n*(1-0.001)):n
dd<-dd[order(rstd),]
dd<-dd[-c(l.cl,u.cl),]
lmx<-update(lmx,data=dd)
#lmx<-lm( x~ age+bmi+T60+spol+SDM,data=dd  )
rstd1<-rstudent(lmx)
ddc<-dd
ddm<-ddc[ddc$spol==0,]
#ddm<-ddc[ddc$spol=="?enski",]
dds<-ddm[,c("age","x")]
#dds<-dds[sample(1:nrow(dds),500),] #used for testing
#dds<-dds #if all
ddma<-dds
getwd()
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
library(fireign)
library(foreign)
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
#load("ATT04218.Rdata")
ninit<-nrow(dd)
dim(dd)
head(dd)
dd$x<-dd$SDM
nmis<-sum(is.na(dd$x))
#dd<-dd[!is.na(dd$x),]
#dd<-dd[!(is.na(dd$age)|is.na(dd$bmi)|is.na(dd$T600)|is.na(dd$SDM)|is.na(dd$spol)),]
dd<-dd[,c("x", "AKG", "DPR", "PON",  "DT", "PRE", "VZG", "T60",  "ATV", "age", "spol")]
dd<-na.omit(dd)
dd$spol<-ifelse(dd$spol=="mo?\241ki",0,1)
#lmx<-lm( x~  SDM+ T600+T60+age+ATT+spol,data= dd     )
lmx<-lm( x~ AKG  +DPR  +PON    +DT +PRE  +VZG  +T60  +age  +spol+ATV,data=dd ,x=T,y=T )
rstd<-rstudent(lmx)
n<-nrow(dd)
l.cl<-1:floor(n*0.001)
u.cl<-floor(n*(1-0.001)):n
dd<-dd[order(rstd),]
dd<-dd[-c(l.cl,u.cl),]
lmx<-update(lmx,data=dd)
#lmx<-lm( x~ age+bmi+T60+spol+SDM,data=dd  )
rstd1<-rstudent(lmx)
ddc<-dd
ddm<-ddc[ddc$spol==0,]
#ddm<-ddc[ddc$spol=="?enski",]
dds<-ddm[,c("age","x")]
#dds<-dds[sample(1:nrow(dds),500),] #used for testing
#dds<-dds #if all
ddma<-dds
save(ddma,"example_report.Rdata")
save(ddma,file="example_report.Rdata")
predict.gamlss
f<-"log"
sum(f%in%c("log","exp","logit","inverse","identity"))
f%in%c("log","exp","logit","inverse","identity")
sum(f%in%c("log","exp","logit","inverse","identity"))==0
make_inverse<-function(f,x){ #add other options!
if (sum(f%in%c("log","exp","logit","inverse","identity"))==0) stop("This link function is not yet implemented.\n Currently implemented link functions are \"log\",\"exp\",\"logit\",\"inverse\",\"identity\"") else {
if (f=="log") y<-exp(x)
if (f=="exp") y<-log(x) #check to see if the names are ok!
if (f=="logit") y<-1/(1+exp(-x))
if (f=="inverse") y<-1/x
if (f=="identity") y<-x
y
}
}
make_inverse("log",2)
make_inverse("loglog",2)
?gamlss.family
normal<-NO(mu.link="log", sigma.link="log")
normal
names(normal)
normal$mu.linkinv()
normal$mu.linkinv
normal<-NO(mu.link="logit", sigma.link="log")
normal
normal$mu.linkinv
pLO
normal<-NO(mu.link="inverse", sigma.link="log")
normal
normal$mu.linkinv
normal<-NO(mu.link="identity", sigma.link="log")
normal
normal$mu.linkinv
normal<-NO(mu.link="cloglog", sigma.link="log")
normal
normal$mu.linkinv
normal<-NO(mu.link="probit", sigma.link="log")
normal
normal$mu.linkinv
make_inverse<-function(f,x){ #add other options!
link<-NO(mu.link=f, sigma.link="log") #the family is not important
invfun<-link$mu.linkinv
invfun(x)
}
make_inverse("log",4)
f<-"log"
link<-NO(mu.link=f, sigma.link="log") #the family is not important
f
link<-NO(mu.link="own", sigma.link="log") #the family is not important
link
eval(f)
link<-NO(mu.link=eval(f), sigma.link="log") #the family is not important
link<-NO(mu.link="log", sigma.link="log") #the family is not important
link<-NO(mu.link="logit", sigma.link="log") #the family is not important
link<-NO(mu.link="cloglog", sigma.link="log") #the family is not important
link<-NO(mu.link="gobit", sigma.link="log") #the family is not important
link<-NO(mu.link="cloglog", sigma.link="log") #the family is not important
?link
link<-NO(mu.link=substitute(f), sigma.link="log") #the family is not important
substitute(f)
link<-NO(mu.link="fun", sigma.link="log") #the family is not important
make.link.gamlss
link<-make.link.gamlss(f)
link
x=10
link<-make.link.gamlss(f) #the family is not important
invfun<-link$linkinv
invfun(x)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10)+qrt+pb(x,df=5),data=aids,family=PO)
m<-gamlssReport(fit)
m2<-gamlssReport(fit,extract.smooth = TRUE)
newm<-data.frame(qrt="3",z=0.25,x=2)
mp<-predict(m,newm)$lp$mu
mp
gp<-gamlss::predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link")
gp<-gamlss:predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link")
gp<-predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="link")
gp
predict(m,newm)
gp<-predict(fit,newdata=data.frame(qrt=3,z=0.25,x=2),what="mu",type="response")
gp
m2<-gamlssReport(fit,extract.smooth = TRUE)
mp2<-predict.gamlssReport(m2,newm,gamlss.prediction = TRUE)
mp2
ShinyApp.gamlssReport<-function(obj, dir=paste0(getwd(),"/ShinyApp"),
plotArgs="xname=x, range.x=range(x), seq.length=1e3, xlab=xname, ylab='y'",
run=TRUE){
if (!(class(obj) == "gamlssReport")) {
stop("Argument 'obj' must be of class gamlssReport.")
}
if (!dir.exists(dir)) {
dir.create(dir)
print("Directory created:", dir, "\n")
} else {
cat("Directory", dir, "already exists. Existing files may be overwritten.")
response <- readline(prompt = "Do you want to continue? (Y/N): ")
if (toupper(response) != "Y") {
stop("Execution stopped by user.")
}
}
#app.R
appCode <- "
library(shiny)
library(gamlss)
library(gamlssReport)
library(bslib)
setwd(dir)
obj <- readRDS(‘gamlsReportObj.RDS’)
# Define UI for application
ui <-  page_sidebar(
title <- ‘gamlssReport Centile Plot’,
sidebar = sidebar(
numericInput('inputX', 'Enter X value:', value = range.x[1], min = range.x[1], max = range.x[2], step=(range.x[2]-range.x[1])/10),
numericInput('inputY', 'Enter Y value:', value = NA, min = -Inf, max = Inf),
helpText(‘-- or --’),
numericInput('inputC', 'Enter centile (0 - 100%):', value = NA, min = 0, max = 100),
#sliderInput(inputId = ‘cent’, label = ‘Enter centile:’, min = 0,max = 100,value = 50
),
mainPanel(
plotOutput('centilePlot'),
textOutput('CentileOrY')
)
)
# Define server logic
server <- function(input, output, session) {
output$centilePlot <- renderPlot({
plot.gamlssReport(obj, "
appCode <- c(appCode, addArgs)
appCode2 <- ")
if (!is.na(input$inputX) && !is.na(input$inputY)) {
points(input$inputX, input$inputY, col = 'red', pch = 19, cex = 2)
} else {
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC/100, nData)
points(input$inputX, y, col = 'red', pch = 19, cex = 2)
}
}
})
# Calculate and display centile rank
output$CentileOrY <- renderText({
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC/100, nData)
paste(‘Y value for given centile is ‘, format(y, digits=4, nsmall=0), ‘.’, sep=‘‘)
} else {
if (!is.na(input$inputX) && !is.na(input$inputY)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
p <- centile.gamlssReport(obj, y=input$inputY, newdata=nData)
paste(‘Centile rank for point (x,y) is ‘, format(p*100, digits=4, nsmall=0), ‘%.’, sep=‘‘)
} else {
‘(you should enter Y value or centile)’
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
"
appCode <- paste0(appCode, appCode2)
cat(appCode, file=paste0(dir,"/app.R"))
saveRDS(obj, paste0(dir,"/gamlsReportObj.RDS"))
if (run) shiny::runApp(dir)
}
getwd()
mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
m.mod<-gamlssReport(mod)
ShinyApp.gamlssReport(obj=m.mod, dir="./TestDir",
plotArgs="xname=x, range.x=range(x), seq.length=1e3")
m.mod
roxygen2::roxygenise()
setwd("C:/Users/rblagus/MF Uni LJ Dropbox/Rok Blagus/reportingGAMLSS_paper/gamlssReport")
setwd("C:/Users/rblagus/MF Uni LJ Dropbox/Rok Blagus/reportingGAMLSS_paper/gamlssReport")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
score.gamlssReport
data(aids)
aids1<-gamlss(y~pb(x,df=4)+qrt,data=aids,family=PO)
m.aids1<-gamlssReport(aids1)
score.gamlssReport(m.aids1,centile=c(0.1,0.5,0.9)*100,
newdata=data.frame(x=4,qrt=4))
