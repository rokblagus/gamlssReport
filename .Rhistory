rbind(c(1,0,0,0),aids$z)
matrix(c(1,0,0,0),ncol=4,nrow=nrow(aids))
t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids)))
cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids))),aids$z)
predl<-cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids))),aids$z)%*%fit$mu.coefficients
predl
predl<-cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=nrow(aids))),ss$x)%*%fit$mu.coefficients
predl<-cbind(t(matrix(c(1,0,0,0),nrow=4,ncol=length(ss$x))),ss$x)%*%fit$mu.coefficients
pred<-predl+ss$y
plot(ss$x,pred,type="l")
pp2<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)))
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp2,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),pp,col="blue")
pred$fun
pred$fun
pred2$fun
z
plot(z[order(aids$z)],aids$z[order(aids$z)])
plot(aids$z[order(aids$z)],z[order(aids$z)])
plot(aids$z[order(aids$z)],z[order(aids$z)],type="l")
object
newdata
what
parameter
head(data)
data<-aids
data <- data[match(names(newdata),names(data))]
## merge the two data together
data <- concat(data,newdata)
data
parform <- formula(object, what)# object[[paste(what, "formula", sep=".")]]
parform[2] <- NULL
## define the terms
Terms <- terms(parform)
m <- model.frame(Terms, data, xlev = object[[paste(what,"xlevels",sep=".")]])
## model design matrix y and w
X <- model.matrix(Terms, data, contrasts = object$contrasts)
y <- object[[paste(what,"lp",sep=".")]]
w <- object[[paste(what,"wt",sep=".")]]
## leave for future checks
#  aN <- dim(newdata)[1]
#zeros <- rep(0,aN)
#ones <- rep(1,aN)
#yaug <- as.vector(c(y,zeros))
#waug <- as.vector(c(w,zeros))
## for keeping only the original data
onlydata <- data$source == "data" # TRUE or FALSE
## whether additive terms are involved in the fitting
smo.mat <- object[[paste(what,"s",sep=".")]]
refit <- lm.wfit(X[onlydata,  , drop = FALSE], y, w)
refit$coefficients
coef <- refit$coef         ## save the coefficints
nX <- dimnames(X)        ## the names of rows and columns
rownames <- nX[[1]][!onlydata] ## only the newdata rows
nrows <- sum(!onlydata)     ## the number of rows in the new data
nac <- is.na(coef)        ## whether they are NA in coefficients
assign.coef <- attr(X, "assign")  ## X is a matrix
collapse <- type != "terms"## !collapse is for whether type is not "terms"
Xpred <- X[!onlydata,]
Xpred <- matrix(Xpred, nrow=nrows) # I think this probably is not needed sinse allready a matrix
pred <- drop(Xpred[, !nac, drop = FALSE] %*% coef[!nac])
pred
smooth.labels <- dimnames(smo.mat)[[2]]       ## getting the labels i.e. "pb(Fl)" "pb(A)"
pred.s <- array(0, c(nrows, n.smooths), list(names(pred),
dimnames(smo.mat)[[2]])) ## creating the prediction matrix
# smooth.labels[smooth.labels%in%colnames(X)]
# smooth.wanted <- smooth.labels[match(smooth.labels, colnames(X), 0) > 0]
## getting the smoothing call
smooth.calls <- lapply(m[smooth.labels], attr, "call") # i.e $`pb(Fl)`
#     gamlss.pb(data[["pb(Fl)"]], z, w)
data <- subset(m, onlydata, drop=FALSE)        ## get the  original data
attr(data, "class") <- NULL                                   ## note that m is the data.frame with all data
new.m <- subset(m, !onlydata, drop=FALSE)       ## get the new data
attr(new.m, "class") <- NULL
residuals <-  if (!is.null(off.num)) object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]]+offsetVar[onlydata]
else object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]]
!is.null(off.num)
residuals=object[[paste(what,"wv",sep=".")]] - object[[paste(what,"lp",sep=".")]]
object[[paste(what,"wv",sep=".")]]
object[[paste(what,"lp",sep=".")]]
aids$y
?gamlss
TT
object
attributes(data[[TT]]) <- attributes(m[[TT]])
Call <- smooth.calls[[TT]] #
Call$xeval <- substitute(new.m[[TT]], list(TT = TT))
z <- residuals + smo.mat[, TT]
z
plot(z)
plot(z[order(aids$z)])
eval(Call)
Call
w
x<-data[["pb(z, df = 8)"]]
xeval = new.m[["pb(z, df = 8)"]]
y<-z
is.null(xeval)
position <- 0
rexpr <- regexpr("predict.gamlss", sys.calls())
rexpr
1:length(rexpr)
position<-1
gamlss.environment <- sys.frame(position)
gamlss.environment <- sys.frame(0)
param
param <- get("what", envir = gamlss.environment)
object <- get("object", envir = gamlss.environment)
TT <- get("TT", envir = gamlss.environment)
smooth.labels <- get("smooth.labels", envir = gamlss.environment)
pred <- getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun(xeval)
pred
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))
getSmo(object, parameter = param, which = which(smooth.labels ==
TT))$fun
z
ss<-spline(z)
ss
ss<-splinefun(z)
ss(0.25)
ss<-splinefun(z[order(aids$z)])
ss(0.25)
gr<-function (x, deriv = 0L)
{
deriv <- as.integer(deriv)
if (deriv < 0L || deriv > 3L)
stop("'deriv' must be between 0 and 3")
if (deriv > 0L) {
z0 <- double(z$n)
z[c("y", "b", "c")] <- switch(deriv,
list(y = z$b, b = 2 * z$c, c = 3 * z$d), list(y = 2 *
z$c, b = 6 * z$d, c = z0), list(y = 6 * z$d,
b = z0, c = z0))
z[["d"]] <- z0
}
res <- .splinefun(x, z)
if (deriv > 0 && z$method == 2 && any(ind <- x <= z$x[1L]))
res[ind] <- ifelse(deriv == 1, z$y[1L], 0)
res
}
gr(0.25)
pred2$fun()
pred2$fun
pred2$fun(0.25)
spline
splinefun()
splinefun
Bg
Bg[46,]%*%fit$mu.coefSmo[[1]]$coef
pred2$fun(0.25)
library(gamlssReport)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=8)+qrt,data=aids,family=PO)
m<-gamlssReport(fit)
m
newm<-data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
mp
gp<-predict(fit,data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000),what="mu",type="lp")
)
gp<-predict(fit,data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="lp")
gp<-predict(fit,data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
gp<-predict(fit,data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
gp
gp<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
fit<-gamlss(y~pb(z,df=10)+qrt,data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
newm2$qrt<-as.character(newm2$qrt)
newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids,what="mu",type="link")
plot(aids$z[order(aids$z)],mp2[order(aids$z)],type="l",col="red")
lines(aids$z[order(aids$z)],gp2[order(aids$z)])
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
plot(aids$z[order(aids$z)],mp2[order(aids$z)],type="p",col="red")
points(aids$z[order(aids$z)],gp2[order(aids$z)],pch="X")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
newm2<-aids[aids$qrt==1]
newm2$qrt<-as.character(newm2$qrt)
newm2$qrt[newm2$qrt=="1"]<-"reference"
newm2<-aids[aids$qrt==1,]
newm2$qrt<-as.character(newm2$qrt)
newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
newm2<-aids[aids$qrt==1,]
newm2$qrt<-as.character(newm2$qrt)
newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids[aids$qrt==1,],what="mu",type="link")
plot(aids$z[order(aids$z)],mp2[order(aids$z)],type="p",col="red")
points(aids$z[order(aids$z)],gp2[order(aids$z)],pch="X")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
aids[aids$qrt==1,]
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10)+qrt,data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(qrt="reference",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(qrt=1,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
newm2<-aids[aids$qrt==1,]
newm2$qrt<-as.character(newm2$qrt)
newm2$qrt[newm2$qrt=="1"]<-"reference"
newm2
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids[aids$qrt==1,],what="mu",type="link")
plot(aids$z[aids$qrt==1],mp2,type="p",col="red")
points(aids$z[aids$qrt==1],gp2,pch="X")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
plot(aids$z[aids$qrt==1],mp2,type="p",col="red",xlim=c(0,1))
points(aids$z[aids$qrt==1],gp2,pch="X")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
table(aids$qrt)
points(aids$z[aids$qrt==1],aids$y[aids$qrt==1])
aids$y[aids$qrt==1]
newm<-data.frame(qrt="2",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(qrt=2,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids[aids$qrt==2,]
newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids[aids$qrt==2,],what="mu",type="link")
plot(aids$z[aids$qrt==2],mp2,type="p",col="red",xlim=c(0,1))
points(aids$z[aids$qrt==2],gp2,pch="X")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
newm<-data.frame(qrt="3",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(qrt=3,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids[aids$qrt==3,]
newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids[aids$qrt==3,],what="mu",type="link")
plot(aids$z[aids$qrt==3],mp2,type="p",col="red",xlim=c(0,1))
points(aids$z[aids$qrt==3],gp2,pch="X")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp,col="blue")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
predict.gamlss
make_prediction<-function(object,xnew.spline,z.new){
params<-object$params
fv<-lp<-vector("list",length=length(params))
names(fv)<-names(lp)<-params
for (i in params){
cfi<-object$coef.beta[[i]]
if (!is.null(object$terms$splinevar[[i]])){
cfs<-D<-vector("list",length=length(object$terms$splinevar[[i]]))
names(cfs)<-names(D)<-object$terms$splinevar[[i]]
for (ii in object$terms$splinevar[[i]] ){
cfs[[ii]]<-object$coef.spline[[i]][[ii]]
D[[ii]]<-make_spline(xnew.spline[[i]][[ii]],object$knots.spline[[i]][[ii]],object$degree.spline[[i]][[ii]],object$range.x[[i]][[ii]])
}#end for
} #end if
if (!is.null(object$terms$splinevar[[i]])){
lp[[i]]<-z.new[[i]]%*%matrix(cfi,ncol=1)
for (ii in object$terms$splinevar[[i]]){
lp[[i]]<-lp[[i]]+D[[ii]]%*%cfs[[ii]]
}
} else {
lp[[i]]<-z.new[[i]]%*%matrix(cfi,ncol=1)
}
FAM <- eval(object$call$family)#
if (!is(FAM,"gamlss.family"))
{
FAM <- family(object)[1]
}
# else
# {
FAM <- as.gamlss.family(FAM)# this should get a gamlss family but not alway
fv[[i]] <- FAM[[paste0(what,".linkinv")]](lp[[i]])
#fv[[i]]<-make_inverse(object$link[[i]],lp[[i]])
}
list(lp=lp,fv=fv)
}
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10)+qrt,data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(qrt="3",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(qrt=3,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
make_spline<-function(newx,knots,degree,rng){ #this will only work if in pb they used uniformly set knots!
##taken from pb gamlss
bbase <- function(x, xl, xr, ndx, deg) #note we dont allow quantile=TRUE option!
{
tpower <- function(x, t, p)
# Truncated p-th power function
(x - t) ^ p * (x > t)
# DS xl= min, xr=max, ndx= number of points within
# Construct B-spline basis
# if quantiles=TRUE use different bases
dx <- (xr - xl) / ndx # DS increment
knots <- seq(xl - deg * dx, xr + deg * dx, by = dx)
P <- outer(x, knots, tpower, deg)# calculate the power in the knots
n <- dim(P)[2]
D <- diff(diag(n), diff = deg + 1) / (gamma(deg + 1) * dx ^ deg) #
B <- (-1) ^ (deg + 1) * P %*% t(D)
attr(B, "knots") <- knots[-c(1:(deg-1), (n-(deg-2)):n)]
B
}
##main f starts here
xr<-rng[2]
xl<-rng[1]
ndx<-length(knots)-degree #number of knots-degree!
xmax<-xr + 0.01 * (xr - xl)
xmin<-xl - 0.01 * (xr - xl)
#dt<-(xmax - xmin) / ndx #use if splineDesign
#knots2<-seq(xmin - degree * dt, xmax + degree * dt, by = dt) #use if splineDesign
#B<-splineDesign(knots = knots2, x = newx, ord = degree + 1, derivs = 0,outer.ok = TRUE)
B<-bbase(x=newx, xl=xmin, xr=xmax, ndx, deg=degree)
B
}
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(qrt=3,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
m3
m
names(m)
m$family
object<-m
object$call$family
object$family
FAM <- eval(object$family)
FAM
!is(FAM,"gamlss.family")
FAM <- as.gamlss.family(FAM)
FAM
FAM[[paste0(i,".linkinv")]]
i="mu"
FAM[[paste0(i,".linkinv")]]
?as.gamlss.family
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?gamlss
?print.gamlss
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(gamlssReport)
fit
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10)+qrt,data=aids,family=PO)
m<-gamlssReport(fit)
fit$family
fit$call$family
eval(fit$call$family)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10)+qrt,data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(qrt="3",z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(qrt=3,z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$lp$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="link")
plot(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,type="l",col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids,what="mu",type="link")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="blac",pch="X")
points(aids$z,gp2,col="black",pch="X")
plot(aids$z,aids$y,pch=16)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$lp$mu
gp2<-predict(fit,newdata=aids,what="mu",type="link")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch="X")
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(aids$z,aids$y,pch=16)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch="X")
legend("topleft",legend=c("gamlssRepor","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,"X"),col=c("black","red","black"),bty="n")
plot(1:10,pch=1:10)
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(aids$z,aids$y,pch=16)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch=4)
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,4),col=c("black","red","black"),bty="n")
?splinefun
mp2
ss<-splinefun(mp2)
names(ss)
dim(ss)
ss
ss<-spline(mp2)
names(ss)
length(ss$x)
ss<-splinefun(mp2)
ssn<-ss(seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
ssn
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),ss,col="magenta")
length(ssn)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),ssn,col="magenta")
zz<-seq(from=min(aids$z),to=max(aids$z),length.out = 10000)
ss<-spline(mp2,xout=zz)
ss
names(ss)
lines(ss$x,ss$y,col="magenta")
ss<-spline(x=aids$z,y=mp2,xout=zz)
lines(ss$x,ss$y,col="magenta")
library(gamlss)
data(aids)
set.seed(1)
aids$z<-runif(nrow(aids))
fit<-gamlss(y~pb(z,df=10),data=aids,family=PO)
m<-gamlssReport(fit)
newm<-data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000))
mp<-predict(m,newm)$fv$mu
gp<-predict(fit,newdata=data.frame(z=seq(from=min(aids$z),to=max(aids$z),length.out = 10000)),what="mu",type="response")
plot(aids$z,aids$y,pch=16)
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),mp,col="red")
lines(seq(from=min(aids$z),to=max(aids$z),length.out = 10000),gp)
newm2<-aids
#newm2$qrt<-as.character(newm2$qrt)
#newm2$qrt[newm2$qrt=="1"]<-"reference"
mp2<-predict(m,newm2)$fv$mu
gp2<-predict(fit,newdata=aids,what="mu",type="response")
points(aids$z,mp2,col="red")
points(aids$z,gp2,col="black",pch=4)
legend("topleft",legend=c("gamlssReport","gamlss"),lty=1,col=c("red","black"),bty="n")
legend("topright",legend=c("data","gamlssReport:observed z","gamlss:observed z"),pch=c(16,1,4),col=c("black","red","black"),bty="n")
zz<-seq(from=min(aids$z),to=max(aids$z),length.out = 10000)
