dd<-dd[-c(l.cl,u.cl),]
lmx<-update(lmx,data=dd)
#lmx<-lm( x~ age+bmi+T60+spol+SDM,data=dd  )
rstd1<-rstudent(lmx)
ddc<-dd
ddm<-ddc[ddc$spol==0,]
#ddm<-ddc[ddc$spol=="?enski",]
dds<-ddm[,c("age","x")]
#dds<-dds[sample(1:nrow(dds),500),] #used for testing
#dds<-dds #if all
ddma<-dds
k.s<-log(nrow(ddma))
ddma$age.pt<-ddma$age**0.5
k.s<-log(nrow(ddma))
mod1 <- gamlss(x ~pb(age.pt, method="GAIC",k=k.s), sigma.fo = ~pb(age.pt, method="GAIC",k=k.s),
nu.fo = ~ pb(age.pt, method="GAIC",k=k.s) ,
tau.fo = ~pb(age.pt, method="GAIC",k=k.s),
family = BCPEo,
control = gamlss.control(trace=FALSE,n.cyc = 100),data = ddma)
library(gamlssReport)
ex.mod<-gamlssReport(mod1)
library(foreign)
library(gamlss)
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
#load("ATT04218.Rdata")
ninit<-nrow(dd)
dim(dd)
head(dd)
dd$x<-dd$SDM
nmis<-sum(is.na(dd$x))
#dd<-dd[!is.na(dd$x),]
#dd<-dd[!(is.na(dd$age)|is.na(dd$bmi)|is.na(dd$T600)|is.na(dd$SDM)|is.na(dd$spol)),]
dd<-dd[,c("x", "AKG", "DPR", "PON",  "DT", "PRE", "VZG", "T60",  "ATV", "age", "spol")]
dd<-na.omit(dd)
#dd$spol<-ifelse(dd$spol=="mo?\241ki",0,1)
dd$spol<-ifelse(dd$spol=="moÄ¹Ë‡ki",0,1)
#lmx<-lm( x~  SDM+ T600+T60+age+ATT+spol,data= dd     )
lmx<-lm( x~ AKG  +DPR  +PON    +DT +PRE  +VZG  +T60  +age  +spol+ATV,data=dd ,x=T,y=T )
rstd<-rstudent(lmx)
n<-nrow(dd)
l.cl<-1:floor(n*0.001)
u.cl<-floor(n*(1-0.001)):n
dd<-dd[order(rstd),]
dd<-dd[-c(l.cl,u.cl),]
lmx<-update(lmx,data=dd)
#lmx<-lm( x~ age+bmi+T60+spol+SDM,data=dd  )
rstd1<-rstudent(lmx)
ddc<-dd
ddm<-ddc[ddc$spol==0,]
#ddm<-ddc[ddc$spol=="?enski",]
dds<-ddm[,c("age","x")]
#dds<-dds[sample(1:nrow(dds),500),] #used for testing
#dds<-dds #if all
ddma<-dds
k.s<-log(nrow(ddma))
ddma$age.pt<-ddma$age**0.5
k.s<-log(nrow(ddma))
mod1 <- gamlss(x ~pb(age.pt, method="GAIC",k=k.s), sigma.fo = ~pb(age.pt, method="GAIC",k=k.s),
nu.fo = ~ pb(age.pt, method="GAIC",k=k.s) ,
tau.fo = ~pb(age.pt, method="GAIC",k=k.s),
family = BCPEo,
control = gamlss.control(trace=FALSE,n.cyc = 100),data = ddma)
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
ShinyApp.gamlssReport<-function(obj, xname, range.x,
plotArgs="seq.length=1e3, xlab=xname, ylab='y'",
dir=paste0(getwd(),"/ShinyApp"), run=TRUE) {
if (!(class(obj) == "gamlssReport")) {
stop("Argument 'obj' must be of class gamlssReport.")
}
if (!dir.exists(dir)) {
dir.create(dir)
cat("Directory created:", dir, "\n")
} else {
cat("Directory", dir, "already exists. Existing files may be overwritten.")
response <- readline(prompt = "Do you want to continue? (Y/N): ")
if (toupper(response) != "Y") {
stop("Execution stopped by user.")
}
}
#app.R
appCode <- "# Shiny app, created by ShinyApp.gamlssReport function
library(shiny)
library(gamlss)
library(gamlssReport)
library(bslib)
xname='"
appCode <- paste0(appCode,xname,"'", "\n")
appCode <- paste0(appCode, "range.x <- ",paste("c(", paste(range.x, collapse = ","), ")", sep = ""), "\n")
appCode <- paste0(appCode, "dir <- '", dir, "'\n")
appCode <- paste0(appCode, "obj <- readRDS('", dir, "/gamlsReportObj.RDS')\n")
appCode2 <- "
# Define UI for application
ui <-  page_sidebar(
title <- 'gamlssReport Centile Plot',
sidebar = sidebar(
numericInput('inputX', 'Enter X value:', value = range.x[1], min = range.x[1], max = range.x[2], step=(range.x[2]-range.x[1])/10),
numericInput('inputY', 'Enter Y value:', value = NA, min = -Inf, max = Inf),
helpText('-- or --'),
numericInput('inputC', 'Enter centile (0 - 100%):', value = NA, min = 1, max = 99),
),
mainPanel(
plotOutput('centilePlot'),
textOutput('CentileOrY')
)
)
# Define server logic
server <- function(input, output) {
output$centilePlot <- renderPlot({
plot.gamlssReport(obj, xname=xname, range.x=range.x, "
appCode <- paste0(appCode, appCode2, plotArgs)
appCode2 <- ")
if (!is.na(input$inputX) && !is.na(input$inputY)) {
points(input$inputX, input$inputY, col = 'red', pch = 19, cex = 2)
} else {
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
points(input$inputX, y, col = 'red', pch = 19, cex = 2)
}
}
})
# Calculate and display centile rank
output$CentileOrY <- renderText({
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
paste('Y value for given centile is ', format(y, digits=4, nsmall=0), '.', sep='')
} else {
if (!is.na(input$inputX) && !is.na(input$inputY)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
p <- centile.gamlssReport(obj, y=input$inputY, newdata=nData)
paste('Centile rank for point (x,y) is ', format(p, digits=4, nsmall=0), '%.', sep='')
} else {
'(you should enter Y value or centile)'
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
"
appCode <- paste0(appCode, appCode2)
cat(appCode, file=paste0(dir,"/app.R"))
saveRDS(obj, paste0(dir,"/gamlsReportObj.RDS"))
if (run) shiny::runApp(dir)
}
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
ex.mod<-gamlssReport(mod1)
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
update.packages(sname_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
update.packages("shiny")
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
library(utils)
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
library(bslib)
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
library(shiny)
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt)
getwd()
ShinyApp.gamlssReport(ex.mod,"age.pt",range.x=ex.mod$range.x$mu$age.pt,run=FALSE)
shiny::runApp("ShinyApp")
runApp('ShinyApp')
library(shiny)
library(gamlss)
library(gamlssReport)
library(bslib)
xname='age.pt'
range.x <- c(2.45144497750918,4.35866339740862)
dir <- 'E:/CentileCurvesFSP/ShinyApp'
obj <- readRDS('E:/CentileCurvesFSP/ShinyApp/gamlsReportObj.RDS')
# Define UI for application
ui <-  page_sidebar(
title <- 'gamlssReport Centile Plot',
sidebar = sidebar(
numericInput('inputX', 'Enter X value:', value = range.x[1], min = range.x[1], max = range.x[2], step=(range.x[2]-range.x[1])/10),
numericInput('inputY', 'Enter Y value:', value = NA, min = -Inf, max = Inf),
helpText('-- or --'),
numericInput('inputC', 'Enter centile (0 - 100%):', value = NA, min = 1, max = 99),
),
mainPanel(
plotOutput('centilePlot'),
textOutput('CentileOrY')
)
)
# Define server logic
server <- function(input, output) {
output$centilePlot <- renderPlot({
plot.gamlssReport(obj, xname=xname, range.x=range.x, seq.length=1e3, xlab=xname, ylab='y')
if (!is.na(input$inputX) && !is.na(input$inputY)) {
points(input$inputX, input$inputY, col = 'red', pch = 19, cex = 2)
} else {
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
points(input$inputX, y, col = 'red', pch = 19, cex = 2)
}
}
})
# Calculate and display centile rank
output$CentileOrY <- renderText({
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
paste('Y value for given centile is ', format(y, digits=4, nsmall=0), '.', sep='')
} else {
if (!is.na(input$inputX) && !is.na(input$inputY)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
p <- centile.gamlssReport(obj, y=input$inputY, newdata=nData)
paste('Centile rank for point (x,y) is ', format(p, digits=4, nsmall=0), '%.', sep='')
} else {
'(you should enter Y value or centile)'
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
ui
server
?page_sidebar
??page_sidebar
??shiny
update.packages(bslib)
update.packages("bslib")
?page_sidebar
library(shiny)
library(ggplot2)
ui <- page_sidebar(
title = "Example dashboard",
sidebar = sidebar(
varSelectInput("var", "Select variable", mtcars)
),
card(
full_screen = TRUE,
card_header("My plot"),
plotOutput("p")
)
)
install.packages(c("bslib", "gamlss", "shiny"))
install.packages("gamlss")
library(foreign)
library(gamlss)
setwd("E:/CentileCurvesFSP")
dd<-read.spss("SVK2018a.sav",to.data.frame=TRUE)
shiny::runApp('ShinyApp')
install.packages("C:/Users/rblagus/MF Uni LJ Dropbox/Rok Blagus/reportingGAMLSS_paper/gamlssReport_0.0.3.tar.gz", repos = NULL, type = "source")
runApp('ShinyApp')
library(gamlss)
data(abdom)
mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
m.mod<-gamlssReport(mod)
**## Not run:**
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
library(gamlss)
data(abdom)
mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
m.mod<-gamlssReport(mod)
**## Not run:**
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
ShinyApp.gamlssReport<-function(obj, xname, range.x,
plotArgs="seq.length=1e3, xlab=xname, ylab='y'",
dir=paste0(getwd(),"/ShinyApp"), run=TRUE) {
if (!(class(obj) == "gamlssReport")) {
stop("Argument 'obj' must be of class gamlssReport.")
}
if (!dir.exists(dir)) {
dir.create(dir)
cat("Directory created:", dir, "\n")
} else {
cat("Directory", dir, "already exists. Existing files may be overwritten.")
response <- readline(prompt = "Do you want to continue? (Y/N): ")
if (toupper(response) != "Y") {
stop("Execution stopped by user.")
}
}
#app.R
appCode <- "# Shiny app, created by ShinyApp.gamlssReport function
library(shiny)
library(gamlss)
library(gamlssReport)
library(bslib)
xname='"
appCode <- paste0(appCode,xname,"'", "\n")
appCode <- paste0(appCode, "range.x <- ",paste("c(", paste(range.x, collapse = ","), ")", sep = ""), "\n")
appCode <- paste0(appCode, "dir <- '", dir, "'\n")
appCode <- paste0(appCode, "obj <- readRDS('", dir, "/gamlsReportObj.RDS')\n")
appCode2 <- "
# Define UI for application
ui <-  page_sidebar(
title <- 'gamlssReport Centile Plot',
sidebar = sidebar(
numericInput('inputX', 'Enter X value:', value = range.x[1], min = range.x[1], max = range.x[2], step=(range.x[2]-range.x[1])/10),
numericInput('inputY', 'Enter Y value:', value = NA, min = -Inf, max = Inf),
helpText('-- or --'),
numericInput('inputC', 'Enter centile (0 - 100%):', value = NA, min = 1, max = 99),
),
mainPanel(
plotOutput('centilePlot'),
textOutput('CentileOrY')
)
)
# Define server logic
server <- function(input, output) {
output$centilePlot <- renderPlot({
plot.gamlssReport(obj, xname=xname, range.x=range.x, "
appCode <- paste0(appCode, appCode2, plotArgs)
appCode2 <- ")
if (!is.na(input$inputX) && !is.na(input$inputY)) {
points(input$inputX, input$inputY, col = 'red', pch = 19, cex = 2)
} else {
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
points(input$inputX, y, col = 'red', pch = 19, cex = 2)
}
}
})
# Calculate and display centile rank
output$CentileOrY <- renderText({
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
paste('Y value for given centile is ', format(y, digits=4, nsmall=0), '.', sep='')
} else {
if (!is.na(input$inputX) && !is.na(input$inputY)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
p <- centile.gamlssReport(obj, y=input$inputY, newdata=nData)
paste('Centile rank for point (x,y) is ', format(p, digits=4, nsmall=0), '%.', sep='')
} else {
'(you should enter Y value or centile)'
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
"
appCode <- paste0(appCode, appCode2)
cat(appCode, file=paste0(dir,"/app.R"))
saveRDS(obj, paste0(dir,"/gamlsReportObj.RDS"))
if (run) shiny::runApp(dir)
}
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir2",
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
sessionInfo()
library(shiny)
library(gamlss)
library(gamlssReport)
data(abdom)
mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
m.mod<-gamlssReport(mod)
dir="/TestDir"
getwd()
#' @title Generate Shiny app
#'
#' @description Function \code{"ShinyApp.gamlssReport"} generates Shiny app, which plots centile curves for the object created by \code{\link{gamlssReport}}.
#'
#' @param obj An object of class \code{"gamlssReport"} representing the GAMLSS model summarized by the function \code{\link{gamlssReport}}.
#' @param xname name (a character of length one) of the x variable used on the x-axis of the plot.
#' Note, the name must exactly match the name of the variable that was used when fitting GAMLSS.
#' @param range.x a numeric vector of length 2 specifying the range of x for which to show the centiles.
#' @param plotArg verbatim text (a character of length one) added after the first 3 parameters (i.e. after \code{obj,xname,range.x}) of \code{\link{plot.gamlssReport}}. Defaults to \code{xname=x, range.x=range(x), seq.length=1e3, xlab=xname, ylab='y'}.
#' Note: as least \code{"xname"}xname and \code{"range.x"} should be provided as they have no default.
#' @param dir (a character of length one) A directory where the function will save \code{app.R} and \code{gamlsReportObj.RDS} (a RDS file of an \code{obj}). Defaults to \code{paste0(getwd(),"/ShinyApp")}, i.e. ShinyApp folder in working directory.
#' @param run logical Run app after it's generation? Defaults to \code{TRUE}.
#'
#' @details Function generates a new directory in which it saves two files: \code{"app.R"} and \code{"gamlsReportObj.RDS"}. When app is run it reads RDS file into gamlssReport object (copy of \code{obj} argument) and plots centile curves by using \code{\link{plot.gamlssReport}}. If user enters (x, y) or (x, centile) value pair, a dot (x,y) is added to the plot and a short comment is shown below the plot.
#' @seealso \code{\link{gamlssReport}}, \code{\link{plot.gamlssReport}}
#' @author Bojan LeskoÅ¡ek, \email{bojan.leskosek@@fsp.uni-lj.si}
#' @export
#' @examples
#' library(gamlss)
#' data(abdom)
#' mod<-gamlss(y~pb(x),sigma.fo=~pb(x),family=BCT, data=abdom, method=mixed(1,20))
#' m.mod<-gamlssReport(mod)
#' **## Not run:**
#' ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir="/TestDir",
#'    plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'")
#' ## End(**Not run**)
ShinyApp.gamlssReport<-function(obj, xname, range.x,
plotArgs="seq.length=1e3, xlab=xname, ylab='y'",
dir=paste0(getwd(),"/ShinyApp"), run=TRUE) {
if (!(class(obj) == "gamlssReport")) {
stop("Argument 'obj' must be of class gamlssReport.")
}
if (!dir.exists(dir)) {
dir.create(dir)
cat("Directory created:", dir, "\n")
} else {
cat("Directory", dir, "already exists. Existing files may be overwritten.")
response <- readline(prompt = "Do you want to continue? (Y/N): ")
if (toupper(response) != "Y") {
stop("Execution stopped by user.")
}
}
#app.R
appCode <- "# Shiny app, created by ShinyApp.gamlssReport function
library(shiny)
library(gamlss)
library(gamlssReport)
library(bslib)
xname='"
appCode <- paste0(appCode,xname,"'", "\n")
appCode <- paste0(appCode, "range.x <- ",paste("c(", paste(range.x, collapse = ","), ")", sep = ""), "\n")
appCode <- paste0(appCode, "dir <- '", dir, "'\n")
appCode <- paste0(appCode, "obj <- readRDS('", dir, "/gamlsReportObj.RDS')\n")
appCode2 <- "
# Define UI for application
ui <-  page_sidebar(
title <- 'gamlssReport Centile Plot',
sidebar = sidebar(
numericInput('inputX', 'Enter X value:', value = range.x[1], min = range.x[1], max = range.x[2], step=(range.x[2]-range.x[1])/10),
numericInput('inputY', 'Enter Y value:', value = NA, min = -Inf, max = Inf),
helpText('-- or --'),
numericInput('inputC', 'Enter centile (0 - 100%):', value = NA, min = 1, max = 99),
),
mainPanel(
plotOutput('centilePlot'),
textOutput('CentileOrY')
)
)
# Define server logic
server <- function(input, output) {
output$centilePlot <- renderPlot({
plot.gamlssReport(obj, xname=xname, range.x=range.x, "
appCode <- paste0(appCode, appCode2, plotArgs)
appCode2 <- ")
if (!is.na(input$inputX) && !is.na(input$inputY)) {
points(input$inputX, input$inputY, col = 'red', pch = 19, cex = 2)
} else {
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
points(input$inputX, y, col = 'red', pch = 19, cex = 2)
}
}
})
# Calculate and display centile rank
output$CentileOrY <- renderText({
if (!is.na(input$inputX) && !is.na(input$inputC)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
y <- score.gamlssReport(obj, input$inputC, nData)
paste('Y value for given centile is ', format(y, digits=4, nsmall=0), '.', sep='')
} else {
if (!is.na(input$inputX) && !is.na(input$inputY)) {
nData <- data.frame(x=(c(input$inputX)))
names(nData) <- xname
p <- centile.gamlssReport(obj, y=input$inputY, newdata=nData)
paste('Centile rank for point (x,y) is ', format(p, digits=4, nsmall=0), '%.', sep='')
} else {
'(you should enter Y value or centile)'
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
"
appCode <- paste0(appCode, appCode2)
cat(appCode, file=paste0(dir,"/app.R"))
saveRDS(obj, paste0(dir,"/gamlsReportObj.RDS"))
if (run) shiny::runApp(dir)
}
ShinyApp.gamlssReport(obj=m.mod, xname="x", range.x=c(10,45), dir=dir,
plotArgs="seq.length=1e3, xlab='gestational age', ylab='abdominal circumference'",
run=FALSE)
getwd()
dir
shiny::runApp(dir)
runApp()
runApp('E:/TestDir')
runApp()
runApp()
runApp('E:/TestDir')
runApp()
runApp('E:/TestDir')
runApp()
runApp('E:/TestDir')
runApp('ShinyApp')
runApp('ShinyApp')
getwd()
