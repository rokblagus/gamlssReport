# endif
# return("easyvvvvv")
}
else {
tau<-get.tau(a=0,b=30,dif,no)
chpoints=tau
if(no==1)
{
tau1<-tau[1]
lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1) #1 chpnt +epsilon
#lp<-lp2 +lp1
}
if(no==2)
{
tau1=tau[1]
tau2=tau[2]
if (alter==FALSE) lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)+delta1* ifelse(x-tau2<0,0, x-tau2)
else
lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)-delta1* ifelse(x-tau2<0,0, x-tau2)
}
if(no==3)
{
tau1=tau[1]
tau2=tau[2]
tau3=tau[3]
if (alter==FALSE) lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)+delta1* ifelse(x-tau2<0,0, x-tau2)+delta1* ifelse(x-tau3<0,0, x-tau3) #1 chpnt
else
lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)-delta1* ifelse(x-tau2<0,0, x-tau2)+delta1* ifelse(x-tau3<0,0, x-tau3)
}
if(no==4)
{
tau1=tau[1]
tau2=tau[2]
tau3=tau[3]
tau4=tau[4]
if (alter==FALSE) lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)+delta1* ifelse(x-tau2<0,0, x-tau2)+delta1* ifelse(x-tau3<0,0, x-tau3)+
delta1* ifelse(x-tau4<0,0, x-tau4)
else
lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)-delta1* ifelse(x-tau2<0,0, x-tau2)+delta1* ifelse(x-tau3<0,0, x-tau3)-
delta1* ifelse(x-tau4<0,0, x-tau4)
}
if(no==5)
{
tau1=tau[1]
tau2=tau[2]
tau3=tau[3]
tau4=tau[4]
tau5=tau[5]
if (alter==FALSE) lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)+delta1* ifelse(x-tau2<0,0, x-tau2)+delta1* ifelse(x-tau3<0,0, x-tau3)+
delta1* ifelse(x-tau4<0,0, x-tau4)+    delta1* ifelse(x-tau5<0,0, x-tau5)
else
lp2<-intercept+delta0*x+delta1* ifelse(x-tau1<0,0, x-tau1)-delta1* ifelse(x-tau2<0,0, x-tau2)+delta1* ifelse(x-tau3<0,0, x-tau3)-
delta1* ifelse(x-tau4<0,0, x-tau4)+    delta1* ifelse(x-tau5<0,0, x-tau5)
}
#return("easy")
}
lp<-lp2 +lp1
if (model=="linear"|model=="quantile"){
eps<-rnorm(n,sd=sqrt(var.sigma))
y<-lp +eps
}
if (model=="logistic"){
prob<-1/(1+exp(-lp))
y<-rbinom(n,prob=prob,size=1)
}
if (model=="poisson"){
rate<-exp(lp)
y<-rpois(n,lambda=rate)
}
if (model=="beta"){
mu<-1/(1+exp(-lp))
#phi<-phi.beta #should not be too small!
var<-mu*(1-mu)/(1+phi.beta)
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
sp<-estBetaParams(mu,var)
#shape1<-mu*phi
#shape2<-phi-shape1
shape1<-sp$alpha
shape2<-sp$beta
y<-rbeta(n,shape1,shape2)
y[y<1e-8]<-1e-8
y[y>1-1e-8]<-1-1e-8
}
df<-data.frame(Y=y,Z =Z , X = x)
my_list <- list(data=df , "chpoints"=chpoints)
return(my_list)
}
#fntcs related to finding the intercept for different models (not relevant for linear and quantile)
#poisson
get.beta0_pois<-function(beta0, lp, target.mean){
-target.mean + mean(exp(beta0 + lp))
}
get_intercept_poisson<-function(mn,delta0,delta1,chpnts,alter){
#lpZ<-c(0.69,0.69,0.69,0.35,-0.035)%*%matrix(c(0.158,0.158,0.5,0.375,55),ncol=1)
lpZ<-simZ(1e6)%*%matrix(c(0.69,0.69,0.69,0.35,-0.035),ncol=1)
x<-0:30
lpX0<-x*delta0
for (i in 1:length(chpnts)){
if (i==1) { lpX0=lpX0+delta1* ifelse(x-chpnts[i]<0,0, x-chpnts[i])
} else {
if (alter==TRUE&(i/2==floor(i/2))) lpX0=lpX0-delta1* ifelse(x-chpnts[i]<0,0, x-chpnts[i])   else lpX0=lpX0+delta1* ifelse(x-chpnts[i]<0,0, x-chpnts[i])
}
}
lpX0<-rep(lpX0,1e6/31)
lp<-as.vector(lpZ)+lpX0
beta0.opt<-uniroot(get.beta0_pois, c(-200,200), tol=1e-12, lp=lp, target.mean=mn,maxiter=1e6)$root #for p=1 it would be enough to do it once, since we get the same throughout, but for p>1 we get different optimum constant
beta0.opt
}
#logistic and beta
get.beta0_logit<-function(beta0, lp, target.prop){
-target.prop + mean(1/ (1+exp(-beta0 - lp)))
}
get_intercept_logistic<-function(mn,delta0,delta1,chpnts,alter){
#lpZ<-c(0.69,0.69,0.69,0.35,-0.035)%*%matrix(c(0.158,0.158,0.5,0.375,55),ncol=1)
lpZ<-simZ(1e6)%*%matrix(c(0.69,0.69,0.69,0.35,-0.035),ncol=1)
x<-0:30
lpX0<-x*delta0
for (i in 1:length(chpnts)){
if (i==1) { lpX0=lpX0+delta1* ifelse(x-chpnts[i]<0,0, x-chpnts[i])
} else {
if (alter==TRUE&(i/2==floor(i/2))) lpX0=lpX0-delta1* ifelse(x-chpnts[i]<0,0, x-chpnts[i])  else lpX0=lpX0+delta1* ifelse(x-chpnts[i]<0,0, x-chpnts[i])
}
}
lpX0<-rep(lpX0,1e6/31)
lp<-as.vector(lpZ)+lpX0
#lp<-as.vector(lpZ+lpX0)
beta0.opt<-uniroot(get.beta0_logit, c(-200,200), tol=1e-8, lp=lp, target.prop=mn)$root #for p=1 it would be enough to do it once, since we get the same throughout, but for p>1 we get different optimum constant
beta0.opt
}
##########end my segmented functions
###functions to get output
est.coef<-function(fit){
list<-rep(NA,12)
names(list) <- c("(Intercept)", " ZZ1", " ZZ2"," ZZ3"," ZZ4"," ZZ5","x","U1.x","U2.x","U3.x","U4.x","U5.x")
results<-list
h<- ifelse(is.null(nrow(fit$psi)),0,nrow(fit$psi))
coef<-coef(fit)
i<-1
while(i<h+8){
results[i]<-coef[i]
i=i+1}
return(results)
}
est.nochp<-function(fit){
h<- ifelse(is.null(nrow(fit$psi)),0,nrow(fit$psi))
return(h)
}
est.location<-function(fit){
t <-NA
h<- ifelse(is.null(nrow(fit$psi)),0,nrow(fit$psi))
if (h==0) return (t)
else return (fit$psi[,"Est."])
}
est.location2<-function(x){
xx<-rep(NA,5)
xx[1:length(x)]<-x
xx
}
est.CI<-function(fit,tci){ #tci can only be "gradient" since we are also considering nonlinear models
ci<-matrix(NA,ncol=2,nrow=5)
h<- ifelse(is.null(nrow(fit$psi)),0,nrow(fit$psi))
if (h==0) return (ci)
if (class(fit)[1]!="rq"){
if(tci=="delta") ci1<-confint.segmented(fit,method="delta")
if(tci=="score") ci1<-confint.segmented(fit,method="score")
if (tci=="gradient") ci1<-confint.segmented(fit,method="gradient")
} else {
if(tci=="delta") ci1<-confint.segmented(fit,method="delta",.vcov =vcov.rq(fit))
if(tci=="score") ci1<-confint.segmented(fit,method="score",.vcov =vcov.rq(fit))
if (tci=="gradient") ci1<-confint.segmented(fit,method="gradient",.vcov =vcov.rq(fit))
}
ci[1:nrow(ci1),]<-ci1[,2:3]
return(ci)
}
my.chp.true<-function(x){
xx<-rep(NA,5)
xx[1:length(x)]<-x
xx
}
#########fncts to do grid search
####grid.search
my.lrt<-function(fit) {
if (class(fit)[1]!="try-error")   res<-as.numeric(logLik(fit)) else res<-NA
res
}
#fit<-fito
my.ci.limits<-function(fit,fiti,no){
limit<-my.lrt(fit)+qchisq(0.95,no)/(-2)
lrts<-unlist(lapply(fiti,my.lrt))
mt<-which(lrts>=limit)
mt
}
#min.grid=1
#max.grid=29
#step.grid=1
#data<-mydata$data
get_limit<-function(x,y){
res<-rep(NA,length(y))
for (i in 1:length(y)) res[i]<-x[[y[i]]]
res
}
my.grid<-function(fit,no,data,min.grid=1,max.grid=29,step.grid=1){
if (no==1){
grid<-seq(from=min.grid,to=max.grid,by=step.grid)
zz<-0
fiti<-list()
for (i in grid){
zz=zz+1
data$U<-ifelse(data$X-i<0,0, data$X-i)
fiti[[zz]]<-try(update(fit,formula = Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X+U,data=data,evaluate=TRUE),silent=TRUE)
}
grid[[zz+1]]<-0
fiti[[zz+1]]<-fit
mm<-which.max(unlist(lapply(fiti,my.lrt)))
if (mm==zz+1) est.tau<-NA else est.tau<-grid[mm]
fito<-fiti[[mm]]
#CI
if (sum(!is.na(est.tau))>0){
lmt<-my.ci.limits(fito,fiti,no)
lmt1<-get_limit(grid,lmt)
ci.tau.1<-c(min(lmt1,na.rm=TRUE),max(lmt1,na.rm=TRUE))
ci.tau<-list(ci.tau.1)
} else ci.tau<-NA
}
if (no==2){
grid<-seq(from=min.grid,to=max.grid,by=step.grid)
zz<-0
fiti<-list()
tau1i<-tau2i<-list()
for (i in 1:(length(grid)-1)){
for (j in (i+1):length(grid)){
zz=zz+1
tau1<-grid[i]
tau2<-grid[j]
tau1i[[zz]]<-tau1
tau2i[[zz]]<-tau2
data$U1<-ifelse(data$X-tau1<0,0, data$X-tau1)
data$U2<-ifelse(data$X-tau2<0,0, data$X-tau2)
fiti[[zz]]<-try(update(fit,formula = Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X+U1+U2,data=data,evaluate=TRUE),silent=TRUE)
}
}
tau1i[[zz+1]]<-0
tau2i[[zz+1]]<-0
fiti[[zz+1]]<-fit
mm<-which.max(unlist(lapply(fiti,my.lrt)))
if (mm==zz+1) est.tau<-NA else {
est.tau1<-tau1i[[mm]]
est.tau2<-tau2i[[mm]]
est.tau<-c(est.tau1,est.tau2)
}
fito<-fiti[[mm]]
#CI
if (sum(!is.na(est.tau))>0){
lmt<-my.ci.limits(fito,fiti,no)
lmt1<-get_limit(tau1i,lmt)
lmt2<-get_limit(tau2i,lmt)
ci.tau.1<-c(min(lmt1,na.rm=TRUE),max(lmt1,na.rm=TRUE))
ci.tau.2<-c(min(lmt2,na.rm=TRUE),max(lmt2,na.rm=TRUE))
ci.tau<-list(ci.tau.1,ci.tau.2)
} else ci.tau<-NA
}
if (no==3){
grid<-seq(from=min.grid,to=max.grid,by=step.grid)
zz<-0
fiti<-list()
tau1i<-tau2i<-tau3i<-list()
for (i in 1:(length(grid)-2)){
for (j in (i+1):(length(grid)-1)){
for (k in (j+1):(length(grid))){
zz=zz+1
tau1<-grid[i]
tau2<-grid[j]
tau3<-grid[k]
tau1i[[zz]]<-tau1
tau2i[[zz]]<-tau2
tau3i[[zz]]<-tau3
data$U1<-ifelse(data$X-tau1<0,0, data$X-tau1)
data$U2<-ifelse(data$X-tau2<0,0, data$X-tau2)
data$U3<-ifelse(data$X-tau3<0,0, data$X-tau3)
fiti[[zz]]<-try(update(fit,formula = Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X+U1+U2+U3,data=data,evaluate=TRUE),silent=TRUE)
}
}}
tau1i[[zz+1]]<-0
tau2i[[zz+1]]<-0
tau3i[[zz+1]]<-0
fiti[[zz+1]]<-fit
mm<-which.max(unlist(lapply(fiti,my.lrt)))
if (mm==zz+1) est.tau<-NA else {
est.tau1<-tau1i[[mm]]
est.tau2<-tau2i[[mm]]
est.tau3<-tau3i[[mm]]
est.tau<-c(est.tau1,est.tau2,est.tau3)
}
fito<-fiti[[mm]]
#CI
if (sum(!is.na(est.tau))>0){
lmt<-my.ci.limits(fito,fiti,no)
lmt1<-get_limit(tau1i,lmt)
lmt2<-get_limit(tau2i,lmt)
lmt3<-get_limit(tau3i,lmt)
ci.tau.1<-c(min(lmt1,na.rm=TRUE),max(lmt1,na.rm=TRUE))
ci.tau.2<-c(min(lmt2,na.rm=TRUE),max(lmt2,na.rm=TRUE))
ci.tau.3<-c(min(lmt3,na.rm=TRUE),max(lmt3,na.rm=TRUE))
ci.tau<-list(ci.tau.1,ci.tau.2,ci.tau.3)
} else ci.tau<-NA
}
if (no==4){
grid<-seq(from=min.grid,to=max.grid,by=step.grid)
zz<-0
fiti<-list()
tau1i<-tau2i<-tau3i<-tau4i<-list()
for (i in 1:(length(grid)-3)){
for (j in (i+1):(length(grid)-2)){
for (k in (j+1):(length(grid)-1)){
for (l in (k+1):(length(grid))){
zz=zz+1
tau1<-grid[i]
tau2<-grid[j]
tau3<-grid[k]
tau4<-grid[l]
tau1i[[zz]]<-tau1
tau2i[[zz]]<-tau2
tau3i[[zz]]<-tau3
tau4i[[zz]]<-tau4
data$U1<-ifelse(data$X-tau1<0,0, data$X-tau1)
data$U2<-ifelse(data$X-tau2<0,0, data$X-tau2)
data$U3<-ifelse(data$X-tau3<0,0, data$X-tau3)
data$U4<-ifelse(data$X-tau4<0,0, data$X-tau4)
fiti[[zz]]<-try(update(fit,formula = Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X+U1+U2+U3+U4,data=data,evaluate=TRUE),silent=TRUE)
}
}}}
tau1i[[zz+1]]<-0
tau2i[[zz+1]]<-0
tau3i[[zz+1]]<-0
tau4i[[zz+1]]<-0
fiti[[zz+1]]<-fit
mm<-which.max(unlist(lapply(fiti,my.lrt)))
if (mm==zz+1) est.tau<-NA else {
est.tau1<-tau1i[[mm]]
est.tau2<-tau2i[[mm]]
est.tau3<-tau3i[[mm]]
est.tau4<-tau4i[[mm]]
est.tau<-c(est.tau1,est.tau2,est.tau3,est.tau4)
}
fito<-fiti[[mm]]
#CI
if (sum(!is.na(est.tau))>0){
lmt<-my.ci.limits(fito,fiti,no)
lmt1<-get_limit(tau1i,lmt)
lmt2<-get_limit(tau2i,lmt)
lmt3<-get_limit(tau3i,lmt)
lmt4<-get_limit(tau4i,lmt)
ci.tau.1<-c(min(lmt1,na.rm=TRUE),max(lmt1,na.rm=TRUE))
ci.tau.2<-c(min(lmt2,na.rm=TRUE),max(lmt2,na.rm=TRUE))
ci.tau.3<-c(min(lmt3,na.rm=TRUE),max(lmt3,na.rm=TRUE))
ci.tau.4<-c(min(lmt4,na.rm=TRUE),max(lmt4,na.rm=TRUE))
ci.tau<-list(ci.tau.1,ci.tau.2,ci.tau.3,ci.tau.4)
} else ci.tau<-NA
}
if (no==5){
grid<-seq(from=min.grid,to=max.grid,by=step.grid)
zz<-0
fiti<-list()
tau1i<-tau2i<-tau3i<-tau4i<-tau5i<-list()
for (i in 1:(length(grid)-4)){
for (j in (i+1):(length(grid)-3)){
for (k in (j+1):(length(grid)-2)){
for (l in (k+1):(length(grid)-1)){
for (m in (l+1):(length(grid))){
zz=zz+1
tau1<-grid[i]
tau2<-grid[j]
tau3<-grid[k]
tau4<-grid[l]
tau5<-grid[m]
tau1i[[zz]]<-tau1
tau2i[[zz]]<-tau2
tau3i[[zz]]<-tau3
tau4i[[zz]]<-tau4
tau5i[[zz]]<-tau5
data$U1<-ifelse(data$X-tau1<0,0, data$X-tau1)
data$U2<-ifelse(data$X-tau2<0,0, data$X-tau2)
data$U3<-ifelse(data$X-tau3<0,0, data$X-tau3)
data$U4<-ifelse(data$X-tau4<0,0, data$X-tau4)
data$U5<-ifelse(data$X-tau5<0,0, data$X-tau5)
fiti[[zz]]<-try(update(fit,formula = Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X+U1+U2+U3+U4+U5,data=data,evaluate=TRUE),silent=TRUE)
} }
}}}
tau1i[[zz+1]]<-0
tau2i[[zz+1]]<-0
tau3i[[zz+1]]<-0
tau4i[[zz+1]]<-0
tau5i[[zz+1]]<-0
fiti[[zz+1]]<-fit
mm<-which.max(unlist(lapply(fiti,my.lrt)))
if (mm==zz+1) est.tau<-NA else {
est.tau1<-tau1i[[mm]]
est.tau2<-tau2i[[mm]]
est.tau3<-tau3i[[mm]]
est.tau4<-tau4i[[mm]]
est.tau5<-tau5i[[mm]]
est.tau<-c(est.tau1,est.tau2,est.tau3,est.tau4,est.tau5)
}
fito<-fiti[[mm]]
#CI
if (sum(!is.na(est.tau))>0){
lmt<-my.ci.limits(fito,fiti,no)
lmt1<-get_limit(tau1i,lmt)
lmt2<-get_limit(tau2i,lmt)
lmt3<-get_limit(tau3i,lmt)
lmt4<-get_limit(tau4i,lmt)
lmt5<-get_limit(tau5i,lmt)
ci.tau.1<-c(min(lmt1,na.rm=TRUE),max(lmt1,na.rm=TRUE))
ci.tau.2<-c(min(lmt2,na.rm=TRUE),max(lmt2,na.rm=TRUE))
ci.tau.3<-c(min(lmt3,na.rm=TRUE),max(lmt3,na.rm=TRUE))
ci.tau.4<-c(min(lmt4,na.rm=TRUE),max(lmt4,na.rm=TRUE))
ci.tau.5<-c(min(lmt5,na.rm=TRUE),max(lmt5,na.rm=TRUE))
ci.tau<-list(ci.tau.1,ci.tau.2,ci.tau.3,ci.tau.4,ci.tau.5)
} else ci.tau<-NA
}
list(est.tau=est.tau,fit=fito,ci.tau=ci.tau)
}
est.coef.grid<-function(fit){
cfs<-rep(NA,12)
cfsi<-coef(fit$fit)
cfs[1:length(cfsi)]<-cfsi
cfs
}
est.location.grid<-function(fit){
cfs<-rep(NA,5)
cfsi<-fit$est.tau
cfs[1:length(cfsi)]<-cfsi
cfs
}
getci.grid<-function(fit){
mat<-matrix(NA,ncol=2,nrow=5)
for (i in 1:length(fit$ci.tau)){
mat[i,]<-fit$ci.tau[[i]]
}
mat
}
delta0=0.1
delta1=0.5
task="medium"
no=2
alter=FALSE
n=100
model="linear"
var.sigma=2
phi.beta=20
intercept=1
mean_y=50
if (model=="linear"|model=="quantile") int=intercept else {
if (model=="poisson"){
int<-get_intercept_poisson(mean_y,delta0,delta1,get.tau(task=task,no=no),alter=alter)
} else {
int<-get_intercept_logistic(mean_y,delta0,delta1,get.tau(task=task,no=no),alter=alter)
}
}
mydata<-mysim_data(n=n,dif=task,no=no, delta0=delta0,delta1=delta1,alter=alter,model=model,intercept=int,var.sigma=var.sigma,phi.beta = phi.beta)
# hist(mydata$data$Y)
#boxplot(mydata$data$Y~mydata$data$X)
mnY<-mean(mydata$data$Y)
sdY<-sd(mydata$data$Y)
if (model=="linear") fit<-try(lm(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data),silent=TRUE)
if (model=="logistic") fit<-try(glm(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,family = binomial(link="logit"),method="brglmFit",type="AS_mean"),silent=TRUE)
if (model=="poisson") fit<-try(glm(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,family = poisson(link="log"),method="brglmFit",type="AS_mean"),silent=TRUE)
if (model=="beta") fit<-try(betareg(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,type="BR",link="logit") ,silent=TRUE)
if (model=="quantile") fit <- try(rq(Y~Z.Z1+Z.Z2+Z.Z3+Z.Z4+Z.Z5+X,data=mydata$data,tau= 0.5 ),silent=TRUE)
segmented.default(fit,seg.Z=~X,npsi=no,control=seg.control(n.boot=50,alpha=0.01))
segmented.default.rok(fit,seg.Z=~X,npsi=no,lambda=10,control=seg.control(n.boot=50,alpha=0.01))
fun<-function(x) x**2
inverse(fun)
inverse = function (f, lower = -inf, upper = infert) {
function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)[1]
}
inverse(fun)
inv_fun<-inverse(fun)
inv_fun(16)
inv_fun<-inverse(fun,-Inf,Inf)
inv_fun(16)
inv_fun<-inverse(fun,-100000,100000)
inv_fun(16)
inv_fun(4)
inverse = function (f, lower = -inf, upper = inf) {
function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)[1]
}
inv_fun<-inverse(fun)
inv_fun(4)
inv_fun<-inverse(fun,-10,10)
inv_fun(4)
fun
install.packages(c("caret", "doParallel", "dplyr", "gbm", "ggplot2", "kernelshap", "knitr", "pROC", "reshape2", "rsample", "shapviz", "tables", "treeshap"))
library(roxygene)
install.packages("roxygen2")
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(gamlssReport)
?gamlssReport
roxygen2::roxygenise()
library(gamlssReport)
library(gamlssReport)
roxygen2::roxygenise()
library(gamlssReport)
roxygen2::roxygenise()
roxygen2::roxygenise()
